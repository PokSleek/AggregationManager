import { defineComponent, computed, openBlock, createElementBlock, normalizeStyle, createElementVNode, renderSlot } from "vue";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaScrollContainer_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaScrollContainer",
  props: {
    ...useSizeProps,
    vertical: { type: Boolean, default: false },
    horizontal: { type: Boolean, default: false },
    color: { type: String, default: "secondary" },
    rtl: { type: Boolean, default: false },
    gradient: { type: Boolean, default: false },
    sizesConfig: {
      type: Object,
      default: () => ({
        defaultSize: 4,
        sizes: { small: 4, medium: 6, large: 8 }
      })
    },
    size: {
      type: String,
      default: "small",
      validator: (v) => ["small", "medium", "large"].includes(v)
    }
  },
  setup(props) {
    const { getColor } = useColors();
    const { sizeComputed } = useSize(props);
    return {
      overflowX: computed(() => props.horizontal ? "auto" : "hidden"),
      overflowY: computed(() => props.vertical ? "auto" : "hidden"),
      scrollColor: computed(() => {
        const color = getColor(props.color);
        return props.gradient ? `linear-gradient(0deg, var(--va-scroll-container-scrollbar-gradient-to) 0%, ${color} 100%)` : color;
      }),
      scrollbarSize: computed(() => sizeComputed.value),
      scrollbarPosition: computed(() => props.rtl ? "rtl" : "ltr")
    };
  }
});
const _hoisted_1 = { class: "va-scroll-container__content" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: "va-scroll-container",
    style: normalizeStyle(`--va-0-scroll-color: ${String(_ctx.scrollColor)};--va-1-scrollbar-size: ${String(_ctx.scrollbarSize)};--va-2-overflow-x: ${String(_ctx.overflowX)};--va-3-overflow-y: ${String(_ctx.overflowY)};--va-4-scrollbar-position: ${String(_ctx.scrollbarPosition)}`)
  }, [
    createElementVNode("div", _hoisted_1, [
      renderSlot(_ctx.$slots, "default")
    ])
  ], 4);
}
var _VaScrollContainer = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaScrollContainer as _ };
//# sourceMappingURL=VaScrollContainer.mjs.map

import { ref, computed } from "vue";
import { e as extractHTMLElement } from "../../../composables/useHTMLElement.js";
import { u as useDocument } from "../../../composables/useDocument.js";
const useAnchorSelector = (props) => {
  const anchorRef = ref();
  const document = useDocument();
  const computedAnchorRef = computed({
    set(v) {
      anchorRef.value = extractHTMLElement(v);
    },
    get() {
      var _a, _b, _c, _d;
      if (props.anchorSelector) {
        return (_b = (_a = document.value) == null ? void 0 : _a.querySelector(props.anchorSelector)) != null ? _b : anchorRef.value;
      } else if (props.innerAnchorSelector && anchorRef.value) {
        return (_d = (_c = anchorRef.value) == null ? void 0 : _c.querySelector(props.innerAnchorSelector)) != null ? _d : anchorRef.value;
      }
      return anchorRef.value;
    }
  });
  return {
    anchorRef: computedAnchorRef
  };
};
export { useAnchorSelector as u };
//# sourceMappingURL=useAnchorSelector.js.map

import { GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig, ProvidedGlobalConfig } from './types';
export declare const GLOBAL_CONFIG: unique symbol;
export declare const createGlobalConfig: () => {
    getGlobalConfig: () => GlobalConfig;
    setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => void;
    mergeGlobalConfig: (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => void;
    globalConfig: import("vue").Ref<{
        colors: {
            variables: {
                [x: string]: string;
                primary: string;
                secondary: string;
                success: string;
                info: string;
                danger: string;
                warning: string;
                backgroundPrimary: string;
                backgroundSecondary: string;
                backgroundElement: string;
                backgroundBorder: string;
                textPrimary: string;
                textInverted: string;
                shadow: string;
                focus: string;
            };
            threshold: number;
            presets: {
                [x: string]: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
                light: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
                dark: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
            };
            currentPresetName: string;
        };
        icons: ({
            name: string;
            resolve?: ((dynamicSegments: {
                [dynamicSegment: string]: string;
            }) => import("../icon").IconProps) | undefined;
            attrs?: Record<string, string | ((...args: any[]) => unknown)> | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | {
            name: {
                exec: (string: string) => RegExpExecArray | null;
                test: (string: string) => boolean;
                readonly source: string;
                readonly global: boolean;
                readonly ignoreCase: boolean;
                readonly multiline: boolean;
                lastIndex: number;
                compile: (pattern: string, flags?: string | undefined) => RegExp;
                readonly flags: string;
                readonly sticky: boolean;
                readonly unicode: boolean;
                readonly dotAll: boolean;
                [Symbol.match]: (string: string) => RegExpMatchArray | null;
                [Symbol.replace]: {
                    (string: string, replaceValue: string): string;
                    (string: string, replacer: (substring: string, ...args: any[]) => string): string;
                };
                [Symbol.search]: (string: string) => number;
                [Symbol.split]: (string: string, limit?: number | undefined) => string[];
                [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
            };
            resolveFromRegex?: ((...regexGroupValues: string[]) => import("../icon").IconProps) | undefined;
            attrs?: Record<string, string | ((...args: any[]) => unknown)> | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        })[];
        components: {
            VaAccordion?: {
                preset?: string | undefined;
                modelValue?: boolean[] | undefined;
                stateful?: boolean | undefined;
                multiple?: boolean | undefined;
                inset?: boolean | undefined;
                popout?: boolean | undefined;
            } | undefined;
            VaAffix?: {
                preset?: string | undefined;
                offsetTop?: number | undefined;
                target?: Window | HTMLElement | (() => Window | HTMLElement) | undefined;
                offsetBottom?: number | undefined;
            } | undefined;
            VaAlert?: {
                title?: string | undefined;
                description?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                icon?: string | undefined;
                stateful?: boolean | undefined;
                center?: boolean | undefined;
                textColor?: string | undefined;
                closeText?: string | undefined;
                closeable?: boolean | undefined;
                dense?: boolean | undefined;
                outline?: boolean | undefined;
                borderColor?: string | undefined;
                border?: "" | "left" | "right" | "top" | "bottom" | undefined;
            } | undefined;
            VaAppBar?: {
                fixed?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                bottom?: boolean | undefined;
                hideOnScroll?: boolean | undefined;
                target?: string | HTMLElement | undefined;
                gradient?: boolean | undefined;
                shadowOnScroll?: boolean | undefined;
                shadowColor?: string | undefined;
            } | undefined;
            VaAspectRatio?: {
                preset?: string | undefined;
                maxWidth?: number | undefined;
                ratio?: number | "auto" | undefined;
                contentHeight?: number | undefined;
                contentWidth?: number | undefined;
            } | undefined;
            VaAvatar?: {
                color?: string | undefined;
                preset?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                icon?: string | undefined;
                loading?: boolean | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                src?: string | undefined;
                readonly textColor?: string | undefined;
                alt?: string | undefined;
                square?: boolean | undefined;
            } | undefined;
            VaAvatarGroup?: {
                vertical?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                fontSize?: string | undefined;
                max?: number | undefined;
                options?: Record<string, unknown>[] | undefined;
                readonly textColor?: string | undefined;
                square?: boolean | undefined;
            } | undefined;
            VaBacktop?: {
                color?: string | undefined;
                preset?: string | undefined;
                target?: string | Element | undefined;
                visibilityHeight?: number | undefined;
                speed?: number | undefined;
                verticalOffset?: string | undefined;
                horizontalOffset?: string | undefined;
                horizontalPosition?: "left" | "right" | undefined;
                verticalPosition?: "top" | "bottom" | undefined;
            } | undefined;
            VaBadge?: {
                text?: string | number | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: string | number | undefined;
                readonly textColor?: string | undefined;
                transparent?: boolean | undefined;
                overlap?: boolean | undefined;
                multiLine?: boolean | undefined;
                visibleEmpty?: boolean | undefined;
                dot?: boolean | undefined;
            } | undefined;
            VaBreadcrumbs?: {
                vertical?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                align?: string | undefined;
                separator?: string | undefined;
                activeColor?: string | undefined;
                separatorColor?: string | undefined;
            } | undefined;
            VaBreadcrumbsItem?: {
                replace?: boolean | undefined;
                label?: string | undefined;
                tag?: string | undefined;
                disabled?: boolean | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
            } | undefined;
            VaButton?: {
                replace?: boolean | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                backgroundOpacity?: number | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                plain?: boolean | undefined;
                textOpacity?: number | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                loading?: boolean | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                block?: boolean | undefined;
                round?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedMaskColor?: string | undefined;
                hoverMaskColor?: string | undefined;
            } | undefined;
            VaButtonDropdown?: {
                readonly?: boolean | undefined;
                replace?: boolean | undefined;
                split?: boolean | undefined;
                readonly label?: string | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                modelValue?: boolean | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                backgroundOpacity?: number | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                plain?: boolean | undefined;
                textOpacity?: number | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: number | [number, number] | undefined;
                keepAnchorWidth?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                loading?: boolean | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                round?: boolean | undefined;
                iconColor?: string | undefined;
                pressedMaskColor?: string | undefined;
                hoverMaskColor?: string | undefined;
                leftIcon?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                preventOverflow?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                cursor?: boolean | undefined;
                trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                keyboardNavigation?: boolean | undefined;
                openedIcon?: string | undefined;
                hideIcon?: boolean | undefined;
                disableButton?: boolean | undefined;
                disableDropdown?: boolean | undefined;
                splitTo?: string | undefined;
                splitHref?: string | undefined;
            } | undefined;
            VaButtonGroup?: {
                replace?: boolean | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                backgroundOpacity?: number | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                plain?: boolean | undefined;
                textOpacity?: number | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                loading?: boolean | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                round?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedMaskColor?: string | undefined;
                hoverMaskColor?: string | undefined;
                grow?: boolean | undefined;
            } | undefined;
            VaButtonToggle?: {
                replace?: boolean | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                type?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                modelValue?: string | number | boolean | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                backgroundOpacity?: number | undefined;
                hoverBehavior?: "mask" | "opacity" | undefined;
                hoverOpacity?: number | undefined;
                pressedBehavior?: "mask" | "opacity" | undefined;
                pressedOpacity?: number | undefined;
                plain?: boolean | undefined;
                textOpacity?: number | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                loading?: boolean | undefined;
                readonly options: {
                    [x: string]: string | number | boolean | undefined;
                    icon?: string | undefined;
                    iconRight?: string | undefined;
                }[];
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                round?: boolean | undefined;
                iconRight?: string | undefined;
                iconColor?: string | undefined;
                pressedMaskColor?: string | undefined;
                hoverMaskColor?: string | undefined;
                grow?: boolean | undefined;
                readonly activeButtonTextColor?: string | undefined;
                toggleColor?: string | undefined;
            } | undefined;
            VaCard?: {
                replace?: boolean | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                readonly textColor?: string | undefined;
                gradient?: boolean | undefined;
                square?: boolean | undefined;
                bordered?: boolean | undefined;
                outlined?: boolean | undefined;
                stripe?: boolean | undefined;
                stripeColor?: string | undefined;
            } | undefined;
            VaCardBlock?: {
                horizontal?: boolean | undefined;
            } | undefined;
            VaCardActions?: {
                vertical?: boolean | undefined;
                preset?: string | undefined;
                align?: string | undefined;
            } | undefined;
            VaCardContent?: {} | undefined;
            VaCardTitle?: {
                preset?: string | undefined;
                readonly textColor?: string | undefined;
            } | undefined;
            VaCarousel?: {
                effect?: "fade" | "transition" | undefined;
                title?: string | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                sizes?: string | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                height?: string | undefined;
                maxWidth?: number | undefined;
                draggable?: boolean | undefined;
                loading?: "lazy" | "eager" | undefined;
                swipable?: boolean | undefined;
                swipeDistance?: number | undefined;
                swipeDirection?: ("all" | "horizontal" | "vertical" | ("" | "left" | "right" | "up" | "down")) | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                src?: string | undefined;
                readonly ratio?: number | undefined;
                alt?: string | undefined;
                readonly items: any[];
                lazy?: boolean | undefined;
                contain?: boolean | undefined;
                fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
                placeholderSrc?: string | undefined;
                srcset?: string | undefined;
                crossorigin?: "anonymous" | "use-credentials" | undefined;
                decoding?: "auto" | "sync" | "async" | undefined;
                fetchpriority?: "auto" | "high" | "low" | undefined;
                referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
                autoscroll?: boolean | undefined;
                autoscrollInterval?: number | undefined;
                autoscrollPauseDuration?: number | undefined;
                infinite?: boolean | undefined;
                fadeKeyframe?: string | undefined;
                arrows?: boolean | undefined;
                indicators?: boolean | undefined;
                indicatorTrigger?: "click" | "hover" | undefined;
            } | undefined;
            VaCheckbox?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                name?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                id?: string | undefined;
                ariaLabel?: string | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                loading?: boolean | undefined;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: boolean | undefined;
                falseValue?: boolean | undefined;
                indeterminate?: boolean | undefined;
                indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                checkedIcon?: string | undefined;
                indeterminateIcon?: string | undefined;
            } | undefined;
            VaChip?: {
                readonly?: boolean | undefined;
                replace?: boolean | undefined;
                flat?: boolean | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                modelValue?: boolean | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                shadow?: boolean | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                closeable?: boolean | undefined;
                outline?: boolean | undefined;
                square?: boolean | undefined;
            } | undefined;
            VaCollapse?: {
                header?: string | undefined;
                flat?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                textColor?: string | undefined;
                solid?: boolean | undefined;
                colorAll?: boolean | undefined;
            } | undefined;
            VaColorIndicator?: {
                color?: string | undefined;
                preset?: string | undefined;
                size?: string | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                square?: boolean | undefined;
            } | undefined;
            VaColorInput?: {
                preset?: string | undefined;
                modelValue?: string | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                indicator?: "square" | "dot" | undefined;
            } | undefined;
            VaColorPalette?: {
                preset?: string | undefined;
                modelValue?: string | undefined;
                stateful?: boolean | undefined;
                indicator?: "square" | "dot" | undefined;
                palette?: string[] | undefined;
            } | undefined;
            VaConfig?: {
                preset?: string | undefined;
                components?: {
                    VaAccordion?: {
                        preset?: string | undefined;
                        modelValue?: boolean[] | undefined;
                        stateful?: boolean | undefined;
                        multiple?: boolean | undefined;
                        inset?: boolean | undefined;
                        popout?: boolean | undefined;
                    } | undefined;
                    VaAffix?: {
                        preset?: string | undefined;
                        offsetTop?: number | undefined;
                        target?: Window | HTMLElement | (() => Window | HTMLElement) | undefined;
                        offsetBottom?: number | undefined;
                    } | undefined;
                    VaAlert?: {
                        title?: string | undefined;
                        description?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: boolean | undefined;
                        icon?: string | undefined;
                        stateful?: boolean | undefined;
                        center?: boolean | undefined;
                        textColor?: string | undefined;
                        closeText?: string | undefined;
                        closeable?: boolean | undefined;
                        dense?: boolean | undefined;
                        outline?: boolean | undefined;
                        borderColor?: string | undefined;
                        border?: "" | "left" | "right" | "top" | "bottom" | undefined;
                    } | undefined;
                    VaAppBar?: {
                        fixed?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        bottom?: boolean | undefined;
                        hideOnScroll?: boolean | undefined;
                        target?: string | HTMLElement | undefined;
                        gradient?: boolean | undefined;
                        shadowOnScroll?: boolean | undefined;
                        shadowColor?: string | undefined;
                    } | undefined;
                    VaAspectRatio?: {
                        preset?: string | undefined;
                        maxWidth?: number | undefined;
                        ratio?: number | "auto" | undefined;
                        contentHeight?: number | undefined;
                        contentWidth?: number | undefined;
                    } | undefined;
                    VaAvatar?: {
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: string | number | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        fontSize?: string | undefined;
                        icon?: string | undefined;
                        loading?: boolean | undefined;
                        fallbackSrc?: string | undefined;
                        fallbackText?: string | undefined;
                        fallbackIcon?: string | undefined;
                        fallbackRender?: (() => any) | undefined;
                        src?: string | undefined;
                        readonly textColor?: string | undefined;
                        alt?: string | undefined;
                        square?: boolean | undefined;
                    } | undefined;
                    VaAvatarGroup?: {
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: string | number | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        fontSize?: string | undefined;
                        max?: number | undefined;
                        options?: Record<string, unknown>[] | undefined;
                        readonly textColor?: string | undefined;
                        square?: boolean | undefined;
                    } | undefined;
                    VaBacktop?: {
                        color?: string | undefined;
                        preset?: string | undefined;
                        target?: string | Element | undefined;
                        visibilityHeight?: number | undefined;
                        speed?: number | undefined;
                        verticalOffset?: string | undefined;
                        horizontalOffset?: string | undefined;
                        horizontalPosition?: "left" | "right" | undefined;
                        verticalPosition?: "top" | "bottom" | undefined;
                    } | undefined;
                    VaBadge?: {
                        text?: string | number | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        placement?: import("../../composables").PlacementWithAlias | undefined;
                        offset?: string | number | undefined;
                        readonly textColor?: string | undefined;
                        transparent?: boolean | undefined;
                        overlap?: boolean | undefined;
                        multiLine?: boolean | undefined;
                        visibleEmpty?: boolean | undefined;
                        dot?: boolean | undefined;
                    } | undefined;
                    VaBreadcrumbs?: {
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        align?: string | undefined;
                        separator?: string | undefined;
                        activeColor?: string | undefined;
                        separatorColor?: string | undefined;
                    } | undefined;
                    VaBreadcrumbsItem?: {
                        replace?: boolean | undefined;
                        label?: string | undefined;
                        tag?: string | undefined;
                        disabled?: boolean | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                    } | undefined;
                    VaButton?: {
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        type?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        backgroundOpacity?: number | undefined;
                        hoverBehavior?: "mask" | "opacity" | undefined;
                        hoverOpacity?: number | undefined;
                        pressedBehavior?: "mask" | "opacity" | undefined;
                        pressedOpacity?: number | undefined;
                        plain?: boolean | undefined;
                        textOpacity?: number | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        loading?: boolean | undefined;
                        textColor?: string | undefined;
                        borderColor?: string | undefined;
                        gradient?: boolean | undefined;
                        block?: boolean | undefined;
                        round?: boolean | undefined;
                        iconRight?: string | undefined;
                        iconColor?: string | undefined;
                        pressedMaskColor?: string | undefined;
                        hoverMaskColor?: string | undefined;
                    } | undefined;
                    VaButtonDropdown?: {
                        readonly?: boolean | undefined;
                        replace?: boolean | undefined;
                        split?: boolean | undefined;
                        readonly label?: string | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        type?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        modelValue?: boolean | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        backgroundOpacity?: number | undefined;
                        hoverBehavior?: "mask" | "opacity" | undefined;
                        hoverOpacity?: number | undefined;
                        pressedBehavior?: "mask" | "opacity" | undefined;
                        pressedOpacity?: number | undefined;
                        plain?: boolean | undefined;
                        textOpacity?: number | undefined;
                        placement?: import("../../composables").PlacementWithAlias | undefined;
                        offset?: number | [number, number] | undefined;
                        keepAnchorWidth?: boolean | undefined;
                        autoPlacement?: boolean | undefined;
                        stickToEdges?: boolean | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: import("../../composables").MaybeHTMLElementOrSelector;
                        loading?: boolean | undefined;
                        textColor?: string | undefined;
                        borderColor?: string | undefined;
                        gradient?: boolean | undefined;
                        round?: boolean | undefined;
                        iconColor?: string | undefined;
                        pressedMaskColor?: string | undefined;
                        hoverMaskColor?: string | undefined;
                        leftIcon?: boolean | undefined;
                        anchorSelector?: string | undefined;
                        innerAnchorSelector?: string | undefined;
                        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                        preventOverflow?: boolean | undefined;
                        isContentHoverable?: boolean | undefined;
                        closeOnContentClick?: boolean | undefined;
                        closeOnClickOutside?: boolean | undefined;
                        closeOnAnchorClick?: boolean | undefined;
                        hoverOverTimeout?: number | undefined;
                        hoverOutTimeout?: number | undefined;
                        cursor?: boolean | undefined;
                        trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                        keyboardNavigation?: boolean | undefined;
                        openedIcon?: string | undefined;
                        hideIcon?: boolean | undefined;
                        disableButton?: boolean | undefined;
                        disableDropdown?: boolean | undefined;
                        splitTo?: string | undefined;
                        splitHref?: string | undefined;
                    } | undefined;
                    VaButtonGroup?: {
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        type?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        backgroundOpacity?: number | undefined;
                        hoverBehavior?: "mask" | "opacity" | undefined;
                        hoverOpacity?: number | undefined;
                        pressedBehavior?: "mask" | "opacity" | undefined;
                        pressedOpacity?: number | undefined;
                        plain?: boolean | undefined;
                        textOpacity?: number | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        loading?: boolean | undefined;
                        textColor?: string | undefined;
                        borderColor?: string | undefined;
                        gradient?: boolean | undefined;
                        round?: boolean | undefined;
                        iconRight?: string | undefined;
                        iconColor?: string | undefined;
                        pressedMaskColor?: string | undefined;
                        hoverMaskColor?: string | undefined;
                        grow?: boolean | undefined;
                    } | undefined;
                    VaButtonToggle?: {
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        type?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        modelValue?: string | number | boolean | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        backgroundOpacity?: number | undefined;
                        hoverBehavior?: "mask" | "opacity" | undefined;
                        hoverOpacity?: number | undefined;
                        pressedBehavior?: "mask" | "opacity" | undefined;
                        pressedOpacity?: number | undefined;
                        plain?: boolean | undefined;
                        textOpacity?: number | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        loading?: boolean | undefined;
                        readonly options: {
                            [x: string]: string | number | boolean | undefined;
                            icon?: string | undefined;
                            iconRight?: string | undefined;
                        }[];
                        textBy?: import("../../composables").StringOrFunction | undefined;
                        valueBy?: import("../../composables").StringOrFunction | undefined;
                        trackBy?: import("../../composables").StringOrFunction | undefined;
                        disabledBy?: import("../../composables").StringOrFunction | undefined;
                        groupBy?: import("../../composables").StringOrFunction | undefined;
                        textColor?: string | undefined;
                        borderColor?: string | undefined;
                        gradient?: boolean | undefined;
                        round?: boolean | undefined;
                        iconRight?: string | undefined;
                        iconColor?: string | undefined;
                        pressedMaskColor?: string | undefined;
                        hoverMaskColor?: string | undefined;
                        grow?: boolean | undefined;
                        readonly activeButtonTextColor?: string | undefined;
                        toggleColor?: string | undefined;
                    } | undefined;
                    VaCard?: {
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        disabled?: boolean | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        readonly textColor?: string | undefined;
                        gradient?: boolean | undefined;
                        square?: boolean | undefined;
                        bordered?: boolean | undefined;
                        outlined?: boolean | undefined;
                        stripe?: boolean | undefined;
                        stripeColor?: string | undefined;
                    } | undefined;
                    VaCardBlock?: {
                        horizontal?: boolean | undefined;
                    } | undefined;
                    VaCardActions?: {
                        vertical?: boolean | undefined;
                        preset?: string | undefined;
                        align?: string | undefined;
                    } | undefined;
                    VaCardContent?: {} | undefined;
                    VaCardTitle?: {
                        preset?: string | undefined;
                        readonly textColor?: string | undefined;
                    } | undefined;
                    VaCarousel?: {
                        effect?: "fade" | "transition" | undefined;
                        title?: string | undefined;
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        sizes?: string | undefined;
                        modelValue?: number | undefined;
                        stateful?: boolean | undefined;
                        height?: string | undefined;
                        maxWidth?: number | undefined;
                        draggable?: boolean | undefined;
                        loading?: "lazy" | "eager" | undefined;
                        swipable?: boolean | undefined;
                        swipeDistance?: number | undefined;
                        swipeDirection?: ("all" | "horizontal" | "vertical" | ("" | "left" | "right" | "up" | "down")) | undefined;
                        fallbackSrc?: string | undefined;
                        fallbackText?: string | undefined;
                        fallbackIcon?: string | undefined;
                        fallbackRender?: (() => any) | undefined;
                        src?: string | undefined;
                        readonly ratio?: number | undefined;
                        alt?: string | undefined;
                        readonly items: any[];
                        lazy?: boolean | undefined;
                        contain?: boolean | undefined;
                        fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
                        placeholderSrc?: string | undefined;
                        srcset?: string | undefined;
                        crossorigin?: "anonymous" | "use-credentials" | undefined;
                        decoding?: "auto" | "sync" | "async" | undefined;
                        fetchpriority?: "auto" | "high" | "low" | undefined;
                        referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
                        autoscroll?: boolean | undefined;
                        autoscrollInterval?: number | undefined;
                        autoscrollPauseDuration?: number | undefined;
                        infinite?: boolean | undefined;
                        fadeKeyframe?: string | undefined;
                        arrows?: boolean | undefined;
                        indicators?: boolean | undefined;
                        indicatorTrigger?: "click" | "hover" | undefined;
                    } | undefined;
                    VaCheckbox?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        name?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        id?: string | undefined;
                        ariaLabel?: string | undefined;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<any>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        loading?: boolean | undefined;
                        arrayValue?: string | number | boolean | Record<string, any> | undefined;
                        leftLabel?: boolean | undefined;
                        trueValue?: boolean | undefined;
                        falseValue?: boolean | undefined;
                        indeterminate?: boolean | undefined;
                        indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                        checkedIcon?: string | undefined;
                        indeterminateIcon?: string | undefined;
                    } | undefined;
                    VaChip?: {
                        readonly?: boolean | undefined;
                        replace?: boolean | undefined;
                        flat?: boolean | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        modelValue?: boolean | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        shadow?: boolean | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        closeable?: boolean | undefined;
                        outline?: boolean | undefined;
                        square?: boolean | undefined;
                    } | undefined;
                    VaCollapse?: {
                        header?: string | undefined;
                        flat?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: boolean | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        textColor?: string | undefined;
                        solid?: boolean | undefined;
                        colorAll?: boolean | undefined;
                    } | undefined;
                    VaColorIndicator?: {
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: string | undefined;
                        modelValue?: boolean | undefined;
                        stateful?: boolean | undefined;
                        square?: boolean | undefined;
                    } | undefined;
                    VaColorInput?: {
                        preset?: string | undefined;
                        modelValue?: string | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        indicator?: "square" | "dot" | undefined;
                    } | undefined;
                    VaColorPalette?: {
                        preset?: string | undefined;
                        modelValue?: string | undefined;
                        stateful?: boolean | undefined;
                        indicator?: "square" | "dot" | undefined;
                        palette?: string[] | undefined;
                    } | undefined;
                    VaConfig?: any | undefined;
                    VaContent?: {} | undefined;
                    VaCounter?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        flat?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: string | number | undefined;
                        disabled?: boolean | undefined;
                        max?: number | undefined;
                        stateful?: boolean | undefined;
                        step?: number | undefined;
                        width?: string | number | undefined;
                        messages?: string | string[] | undefined;
                        buttons?: boolean | undefined;
                        textColor?: string | undefined;
                        outline?: boolean | undefined;
                        bordered?: boolean | undefined;
                        min?: number | undefined;
                        manualInput?: boolean | undefined;
                        increaseIcon?: string | undefined;
                        decreaseIcon?: string | undefined;
                        rounded?: boolean | undefined;
                        margins?: string | number | undefined;
                    } | undefined;
                    VaDataTable?: {
                        table?: boolean | undefined;
                        filter?: string | undefined;
                        horizontal?: boolean | undefined;
                        preset?: string | undefined;
                        readonly modelValue?: any[] | undefined;
                        disabled?: boolean | undefined;
                        readonly height?: string | number | undefined;
                        loading?: boolean | undefined;
                        trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
                        delay?: number | undefined;
                        items?: import("../../components").DataTableItem[] | undefined;
                        grid?: boolean | undefined;
                        selectMode?: import("../../components").DataTableSelectMode | undefined;
                        columns?: (string | {
                            [x: string]: any;
                            key: string;
                            name?: string | undefined;
                            label?: string | undefined;
                            thTitle?: string | undefined;
                            sortable?: boolean | undefined;
                            sortingFn?: ((a: any, b: any) => number) | undefined;
                            sortingOptions?: import("../../components").DataTableSortingOrder[] | undefined;
                            thAlign?: import("../../components").DataTableAlignOptions | undefined;
                            thVerticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                            tdAlign?: import("../../components").DataTableAlignOptions | undefined;
                            tdVerticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                            width?: string | number | undefined;
                            thClass?: unknown;
                            tdClass?: unknown;
                            thStyle?: unknown;
                            tdStyle?: unknown;
                            headerTitle?: string | undefined;
                            alignHead?: import("../../components").DataTableAlignOptions | undefined;
                            verticalAlignHead?: import("../../components").DataTableVerticalAlignOptions | undefined;
                            align?: import("../../components").DataTableAlignOptions | undefined;
                            verticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                            classes?: unknown;
                            headerClasses?: unknown;
                            style?: unknown;
                            headerStyle?: unknown;
                        })[] | undefined;
                        selectedColor?: string | undefined;
                        allowFooterSorting?: boolean | undefined;
                        stickyHeader?: boolean | undefined;
                        stickyFooter?: boolean | undefined;
                        selectable?: boolean | undefined;
                        bench?: number | undefined;
                        itemSize?: string | number | undefined;
                        wrapperSize?: string | number | undefined;
                        hoverable?: boolean | undefined;
                        clickable?: boolean | undefined;
                        loadingColor?: string | undefined;
                        noDataHtml?: string | undefined;
                        noDataFilteredHtml?: string | undefined;
                        hideDefaultHeader?: boolean | undefined;
                        footerClone?: boolean | undefined;
                        striped?: boolean | undefined;
                        virtualScroller?: boolean | undefined;
                        virtualTrackBy?: string | number | undefined;
                        gridColumns?: number | undefined;
                        itemsTrackBy?: string | ((item: import("../../components").DataTableItem) => any) | undefined;
                        readonly perPage?: number | undefined;
                        readonly currentPage?: number | undefined;
                        readonly filterMethod?: import("../../components").DataTableFilterMethod | undefined;
                        sortingOptions?: import("../../components").DataTableSortingOrder[] | undefined;
                        readonly sortBy?: string | undefined;
                        readonly sortingOrder?: import("../../components").DataTableSortingOrder | undefined;
                        scrollTopMargin?: number | undefined;
                        scrollBottomMargin?: number | undefined;
                        readonly rowBind?: import("../../components").DataTableRowBind | undefined;
                        readonly cellBind?: import("../../components").DataTableCellBind | undefined;
                        animated?: boolean | undefined;
                    } | undefined;
                    VaDateInput?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        view?: {
                            type: import("../../components/va-date-picker/types").DatePickerViewType;
                            year: number;
                            month: number;
                        } | undefined;
                        color?: string | undefined;
                        type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
                        preset?: string | undefined;
                        mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
                        readonly modelValue?: string | {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        } | (string | {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        })[] | {
                            start?: string | {
                                toString: () => string;
                                toDateString: () => string;
                                toTimeString: () => string;
                                toLocaleString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleDateString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleTimeString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                valueOf: () => number;
                                getTime: () => number;
                                getFullYear: () => number;
                                getUTCFullYear: () => number;
                                getMonth: () => number;
                                getUTCMonth: () => number;
                                getDate: () => number;
                                getUTCDate: () => number;
                                getDay: () => number;
                                getUTCDay: () => number;
                                getHours: () => number;
                                getUTCHours: () => number;
                                getMinutes: () => number;
                                getUTCMinutes: () => number;
                                getSeconds: () => number;
                                getUTCSeconds: () => number;
                                getMilliseconds: () => number;
                                getUTCMilliseconds: () => number;
                                getTimezoneOffset: () => number;
                                setTime: (time: number) => number;
                                setMilliseconds: (ms: number) => number;
                                setUTCMilliseconds: (ms: number) => number;
                                setSeconds: (sec: number, ms?: number | undefined) => number;
                                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setDate: (date: number) => number;
                                setUTCDate: (date: number) => number;
                                setMonth: (month: number, date?: number | undefined) => number;
                                setUTCMonth: (month: number, date?: number | undefined) => number;
                                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                toUTCString: () => string;
                                toISOString: () => string;
                                toJSON: (key?: any) => string;
                                [Symbol.toPrimitive]: {
                                    (hint: "default"): string;
                                    (hint: "string"): string;
                                    (hint: "number"): number;
                                    (hint: string): string | number;
                                };
                            } | null | undefined;
                            end?: string | {
                                toString: () => string;
                                toDateString: () => string;
                                toTimeString: () => string;
                                toLocaleString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleDateString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleTimeString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                valueOf: () => number;
                                getTime: () => number;
                                getFullYear: () => number;
                                getUTCFullYear: () => number;
                                getMonth: () => number;
                                getUTCMonth: () => number;
                                getDate: () => number;
                                getUTCDate: () => number;
                                getDay: () => number;
                                getUTCDay: () => number;
                                getHours: () => number;
                                getUTCHours: () => number;
                                getMinutes: () => number;
                                getUTCMinutes: () => number;
                                getSeconds: () => number;
                                getUTCSeconds: () => number;
                                getMilliseconds: () => number;
                                getUTCMilliseconds: () => number;
                                getTimezoneOffset: () => number;
                                setTime: (time: number) => number;
                                setMilliseconds: (ms: number) => number;
                                setUTCMilliseconds: (ms: number) => number;
                                setSeconds: (sec: number, ms?: number | undefined) => number;
                                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setDate: (date: number) => number;
                                setUTCDate: (date: number) => number;
                                setMonth: (month: number, date?: number | undefined) => number;
                                setUTCMonth: (month: number, date?: number | undefined) => number;
                                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                toUTCString: () => string;
                                toISOString: () => string;
                                toJSON: (key?: any) => string;
                                [Symbol.toPrimitive]: {
                                    (hint: "default"): string;
                                    (hint: "string"): string;
                                    (hint: "number"): number;
                                    (hint: string): string | number;
                                };
                            } | null | undefined;
                        } | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        clearable?: boolean | undefined;
                        stateful?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        placement?: import("../../composables").PlacementWithAlias | undefined;
                        offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                        keepAnchorWidth?: boolean | undefined;
                        autoPlacement?: boolean | undefined;
                        stickToEdges?: boolean | undefined;
                        counterValue?: number | undefined;
                        target?: import("../../composables").MaybeHTMLElementOrSelector;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<import("../../components/va-date-input/types").DateInputModelValue>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        loading?: boolean | undefined;
                        background?: string | undefined;
                        textColor?: string | undefined;
                        outline?: boolean | undefined;
                        bordered?: boolean | undefined;
                        leftIcon?: boolean | undefined;
                        anchorSelector?: string | undefined;
                        innerAnchorSelector?: string | undefined;
                        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                        preventOverflow?: boolean | undefined;
                        isContentHoverable?: boolean | undefined;
                        closeOnContentClick?: boolean | undefined;
                        closeOnClickOutside?: boolean | undefined;
                        closeOnAnchorClick?: boolean | undefined;
                        hoverOverTimeout?: number | undefined;
                        hoverOutTimeout?: number | undefined;
                        cursor?: boolean | undefined;
                        trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                        keyboardNavigation?: boolean | undefined;
                        maxLength?: number | undefined;
                        focused?: boolean | undefined;
                        requiredMark?: boolean | undefined;
                        clearableIcon?: string | undefined;
                        clearValue?: string | {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        } | (string | {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        })[] | {
                            start?: string | {
                                toString: () => string;
                                toDateString: () => string;
                                toTimeString: () => string;
                                toLocaleString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleDateString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleTimeString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                valueOf: () => number;
                                getTime: () => number;
                                getFullYear: () => number;
                                getUTCFullYear: () => number;
                                getMonth: () => number;
                                getUTCMonth: () => number;
                                getDate: () => number;
                                getUTCDate: () => number;
                                getDay: () => number;
                                getUTCDay: () => number;
                                getHours: () => number;
                                getUTCHours: () => number;
                                getMinutes: () => number;
                                getUTCMinutes: () => number;
                                getSeconds: () => number;
                                getUTCSeconds: () => number;
                                getMilliseconds: () => number;
                                getUTCMilliseconds: () => number;
                                getTimezoneOffset: () => number;
                                setTime: (time: number) => number;
                                setMilliseconds: (ms: number) => number;
                                setUTCMilliseconds: (ms: number) => number;
                                setSeconds: (sec: number, ms?: number | undefined) => number;
                                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setDate: (date: number) => number;
                                setUTCDate: (date: number) => number;
                                setMonth: (month: number, date?: number | undefined) => number;
                                setUTCMonth: (month: number, date?: number | undefined) => number;
                                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                toUTCString: () => string;
                                toISOString: () => string;
                                toJSON: (key?: any) => string;
                                [Symbol.toPrimitive]: {
                                    (hint: "default"): string;
                                    (hint: "string"): string;
                                    (hint: "number"): number;
                                    (hint: string): string | number;
                                };
                            } | null | undefined;
                            end?: string | {
                                toString: () => string;
                                toDateString: () => string;
                                toTimeString: () => string;
                                toLocaleString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleDateString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleTimeString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                valueOf: () => number;
                                getTime: () => number;
                                getFullYear: () => number;
                                getUTCFullYear: () => number;
                                getMonth: () => number;
                                getUTCMonth: () => number;
                                getDate: () => number;
                                getUTCDate: () => number;
                                getDay: () => number;
                                getUTCDay: () => number;
                                getHours: () => number;
                                getUTCHours: () => number;
                                getMinutes: () => number;
                                getUTCMinutes: () => number;
                                getSeconds: () => number;
                                getUTCSeconds: () => number;
                                getMilliseconds: () => number;
                                getUTCMilliseconds: () => number;
                                getTimezoneOffset: () => number;
                                setTime: (time: number) => number;
                                setMilliseconds: (ms: number) => number;
                                setUTCMilliseconds: (ms: number) => number;
                                setSeconds: (sec: number, ms?: number | undefined) => number;
                                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setDate: (date: number) => number;
                                setUTCDate: (date: number) => number;
                                setMonth: (month: number, date?: number | undefined) => number;
                                setUTCMonth: (month: number, date?: number | undefined) => number;
                                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                toUTCString: () => string;
                                toISOString: () => string;
                                toJSON: (key?: any) => string;
                                [Symbol.toPrimitive]: {
                                    (hint: "default"): string;
                                    (hint: "string"): string;
                                    (hint: "number"): number;
                                    (hint: string): string | number;
                                };
                            } | null | undefined;
                        } | undefined;
                        manualInput?: boolean | undefined;
                        highlightWeekend?: boolean | undefined;
                        highlightToday?: boolean | undefined;
                        monthNames?: string[] | undefined;
                        weekdayNames?: string[] | undefined;
                        firstWeekday?: "Monday" | "Sunday" | undefined;
                        hideWeekDays?: boolean | undefined;
                        showOtherMonths?: boolean | undefined;
                        allowedDays?: ((date: Date) => boolean) | undefined;
                        weekends?: ((date: Date) => boolean) | undefined;
                        allowedMonths?: ((date: Date) => boolean) | undefined;
                        allowedYears?: ((date: Date) => boolean) | undefined;
                        startYear?: number | undefined;
                        endYear?: number | undefined;
                        weekendsColor?: string | undefined;
                        resetOnClose?: boolean | undefined;
                        isOpen?: boolean | undefined;
                        readonly format?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => string) | undefined;
                        formatDate?: ((date: Date) => string) | undefined;
                        readonly parse?: ((input: string) => import("../../components/va-date-input/types").DateInputValue) | undefined;
                        readonly parseDate?: ((input: string) => Date) | undefined;
                        readonly parseValue?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => import("../../components/va-date-picker/types").DatePickerModelValue) | undefined;
                        delimiter?: string | undefined;
                        rangeDelimiter?: string | undefined;
                    } | undefined;
                    VaDatePicker?: {
                        readonly?: boolean | undefined;
                        readonly view?: {
                            type: import("../../components/va-date-picker/types").DatePickerViewType;
                            year: number;
                            month: number;
                        } | undefined;
                        color?: string | undefined;
                        type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
                        preset?: string | undefined;
                        mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
                        readonly modelValue?: {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        } | {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        }[] | {
                            start?: {
                                toString: () => string;
                                toDateString: () => string;
                                toTimeString: () => string;
                                toLocaleString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleDateString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleTimeString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                valueOf: () => number;
                                getTime: () => number;
                                getFullYear: () => number;
                                getUTCFullYear: () => number;
                                getMonth: () => number;
                                getUTCMonth: () => number;
                                getDate: () => number;
                                getUTCDate: () => number;
                                getDay: () => number;
                                getUTCDay: () => number;
                                getHours: () => number;
                                getUTCHours: () => number;
                                getMinutes: () => number;
                                getUTCMinutes: () => number;
                                getSeconds: () => number;
                                getUTCSeconds: () => number;
                                getMilliseconds: () => number;
                                getUTCMilliseconds: () => number;
                                getTimezoneOffset: () => number;
                                setTime: (time: number) => number;
                                setMilliseconds: (ms: number) => number;
                                setUTCMilliseconds: (ms: number) => number;
                                setSeconds: (sec: number, ms?: number | undefined) => number;
                                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setDate: (date: number) => number;
                                setUTCDate: (date: number) => number;
                                setMonth: (month: number, date?: number | undefined) => number;
                                setUTCMonth: (month: number, date?: number | undefined) => number;
                                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                toUTCString: () => string;
                                toISOString: () => string;
                                toJSON: (key?: any) => string;
                                [Symbol.toPrimitive]: {
                                    (hint: "default"): string;
                                    (hint: "string"): string;
                                    (hint: "number"): number;
                                    (hint: string): string | number;
                                };
                            } | null | undefined;
                            end?: {
                                toString: () => string;
                                toDateString: () => string;
                                toTimeString: () => string;
                                toLocaleString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleDateString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                toLocaleTimeString: {
                                    (): string;
                                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                                };
                                valueOf: () => number;
                                getTime: () => number;
                                getFullYear: () => number;
                                getUTCFullYear: () => number;
                                getMonth: () => number;
                                getUTCMonth: () => number;
                                getDate: () => number;
                                getUTCDate: () => number;
                                getDay: () => number;
                                getUTCDay: () => number;
                                getHours: () => number;
                                getUTCHours: () => number;
                                getMinutes: () => number;
                                getUTCMinutes: () => number;
                                getSeconds: () => number;
                                getUTCSeconds: () => number;
                                getMilliseconds: () => number;
                                getUTCMilliseconds: () => number;
                                getTimezoneOffset: () => number;
                                setTime: (time: number) => number;
                                setMilliseconds: (ms: number) => number;
                                setUTCMilliseconds: (ms: number) => number;
                                setSeconds: (sec: number, ms?: number | undefined) => number;
                                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                                setDate: (date: number) => number;
                                setUTCDate: (date: number) => number;
                                setMonth: (month: number, date?: number | undefined) => number;
                                setUTCMonth: (month: number, date?: number | undefined) => number;
                                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                                toUTCString: () => string;
                                toISOString: () => string;
                                toJSON: (key?: any) => string;
                                [Symbol.toPrimitive]: {
                                    (hint: "default"): string;
                                    (hint: "string"): string;
                                    (hint: "number"): number;
                                    (hint: string): string | number;
                                };
                            } | null | undefined;
                        } | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        textColor?: string | undefined;
                        highlightWeekend?: boolean | undefined;
                        highlightToday?: boolean | undefined;
                        monthNames?: string[] | undefined;
                        weekdayNames?: string[] | undefined;
                        firstWeekday?: "Monday" | "Sunday" | undefined;
                        hideWeekDays?: boolean | undefined;
                        showOtherMonths?: boolean | undefined;
                        allowedDays?: ((date: Date) => boolean) | undefined;
                        weekends?: ((date: Date) => boolean) | undefined;
                        allowedMonths?: ((date: Date) => boolean) | undefined;
                        allowedYears?: ((date: Date) => boolean) | undefined;
                        startYear?: number | undefined;
                        endYear?: number | undefined;
                        weekendsColor?: string | undefined;
                    } | undefined;
                    VaDivider?: {
                        vertical?: boolean | undefined;
                        preset?: string | undefined;
                        orientation?: "left" | "center" | "right" | undefined;
                        inset?: boolean | undefined;
                        dashed?: boolean | undefined;
                    } | undefined;
                    VaDropdown?: {
                        readonly?: boolean | undefined;
                        preset?: string | undefined;
                        readonly modelValue?: boolean | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        placement?: import("../../composables").PlacementWithAlias | undefined;
                        offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                        keepAnchorWidth?: boolean | undefined;
                        autoPlacement?: boolean | undefined;
                        stickToEdges?: boolean | undefined;
                        target?: import("../../composables").MaybeHTMLElementOrSelector;
                        anchorSelector?: string | undefined;
                        innerAnchorSelector?: string | undefined;
                        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                        preventOverflow?: boolean | undefined;
                        isContentHoverable?: boolean | undefined;
                        closeOnContentClick?: boolean | undefined;
                        closeOnClickOutside?: boolean | undefined;
                        closeOnAnchorClick?: boolean | undefined;
                        hoverOverTimeout?: number | undefined;
                        hoverOutTimeout?: number | undefined;
                        cursor?: boolean | undefined;
                        trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                        keyboardNavigation?: boolean | undefined;
                    } | undefined;
                    VaDropdownContent?: {
                        background?: string | undefined;
                        readonly textColor?: string | undefined;
                        noPadding?: boolean | undefined;
                    } | undefined;
                    VaFallback?: {
                        readonly fallbackSrc?: string | undefined;
                        readonly fallbackText?: string | undefined;
                        readonly fallbackIcon?: string | undefined;
                        readonly fallbackRender?: (() => any) | undefined;
                    } | undefined;
                    VaFileUpload?: {
                        color?: string | undefined;
                        type?: "list" | "single" | "gallery" | undefined;
                        preset?: string | undefined;
                        modelValue?: {
                            url?: string | undefined;
                            readonly lastModified?: number | undefined;
                            readonly name?: string | undefined;
                            readonly webkitRelativePath?: string | undefined;
                            readonly size?: number | undefined;
                            readonly type?: string | undefined;
                            arrayBuffer?: (() => Promise<ArrayBuffer>) | undefined;
                            slice?: ((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined;
                            stream?: (() => ReadableStream<any>) | undefined;
                            text?: (() => Promise<string>) | undefined;
                        } | {
                            url?: string | undefined;
                            readonly lastModified?: number | undefined;
                            readonly name?: string | undefined;
                            readonly webkitRelativePath?: string | undefined;
                            readonly size?: number | undefined;
                            readonly type?: string | undefined;
                            arrayBuffer?: (() => Promise<ArrayBuffer>) | undefined;
                            slice?: ((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined;
                            stream?: (() => ReadableStream<any>) | undefined;
                            text?: (() => Promise<string>) | undefined;
                        }[] | undefined;
                        disabled?: boolean | undefined;
                        undo?: boolean | undefined;
                        dropzone?: boolean | undefined;
                        undoDuration?: number | undefined;
                        undoButtonText?: string | undefined;
                        deletedFileMessage?: string | undefined;
                        fileTypes?: string | undefined;
                        hideFileList?: boolean | undefined;
                        dropZoneText?: string | undefined;
                        uploadButtonText?: string | undefined;
                    } | undefined;
                    VaForm?: {
                        tag?: string | undefined;
                        preset?: string | undefined;
                        autofocus?: boolean | undefined;
                    } | undefined;
                    VaHover?: {
                        preset?: string | undefined;
                        modelValue?: boolean | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                    } | undefined;
                    VaIcon?: {
                        name?: string | undefined;
                        readonly tag?: string | undefined;
                        readonly component?: any;
                        readonly color?: string | undefined;
                        readonly rotation?: string | number | undefined;
                        readonly spin?: string | boolean | undefined;
                        flip?: "off" | "horizontal" | "vertical" | "both" | undefined;
                        preset?: string | undefined;
                        size?: string | number | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                    } | undefined;
                    VaImage?: {
                        title?: string | undefined;
                        preset?: string | undefined;
                        sizes?: string | undefined;
                        maxWidth?: number | undefined;
                        draggable?: boolean | undefined;
                        readonly loading?: "lazy" | "eager" | undefined;
                        fallbackSrc?: string | undefined;
                        fallbackText?: string | undefined;
                        fallbackIcon?: string | undefined;
                        fallbackRender?: (() => any) | undefined;
                        readonly src?: string | undefined;
                        ratio?: number | "auto" | undefined;
                        alt?: string | undefined;
                        lazy?: boolean | undefined;
                        contain?: boolean | undefined;
                        fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
                        placeholderSrc?: string | undefined;
                        srcset?: string | undefined;
                        readonly crossorigin?: "anonymous" | "use-credentials" | undefined;
                        readonly decoding?: "auto" | "sync" | "async" | undefined;
                        fetchpriority?: "auto" | "high" | "low" | undefined;
                        readonly referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
                    } | undefined;
                    VaInfiniteScroll?: {
                        reverse?: boolean | undefined;
                        tag?: string | undefined;
                        preset?: string | undefined;
                        disabled?: boolean | undefined;
                        readonly load: Function;
                        offset?: number | undefined;
                        scrollTarget?: string | HTMLElement | undefined;
                        debounce?: number | undefined;
                    } | undefined;
                    VaInnerLoading?: {
                        readonly color?: string | undefined;
                        preset?: string | undefined;
                        size?: number | undefined;
                        icon?: string | undefined;
                        loading?: boolean | undefined;
                    } | undefined;
                    VaInput?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        mask?: string | Record<string, number[]> | {
                            creditCard?: boolean | undefined;
                            creditCardStrictMode?: boolean | undefined;
                            creditCardType?: string | undefined;
                            onCreditCardTypeChanged?: import("cleave.js/options/creditCard").CreditCardTypeChangeHandler | undefined;
                            phone?: boolean | undefined;
                            phoneRegionCode?: string | undefined;
                            date?: boolean | undefined;
                            dateMin?: string | undefined;
                            dateMax?: string | undefined;
                            datePattern?: readonly string[] | undefined;
                            time?: boolean | undefined;
                            timePattern?: readonly string[] | undefined;
                            timeFormat?: string | undefined;
                            numeral?: boolean | undefined;
                            numeralDecimalMark?: string | undefined;
                            numeralDecimalScale?: number | undefined;
                            numeralIntegerScale?: number | undefined;
                            numeralPositiveOnly?: boolean | undefined;
                            numeralThousandsGroupStyle?: import("cleave.js/options").NumeralThousandsGroupStyleType | undefined;
                            stripLeadingZeroes?: boolean | undefined;
                            tailPrefix?: boolean | undefined;
                            blocks?: readonly number[] | undefined;
                            copyDelimiter?: boolean | undefined;
                            delimiter?: string | undefined;
                            delimiters?: readonly string[] | undefined;
                            delimiterLazyShow?: boolean | undefined;
                            initValue?: any;
                            lowercase?: boolean | undefined;
                            numericOnly?: boolean | undefined;
                            prefix?: string | undefined;
                            noImmediatePrefix?: boolean | undefined;
                            rawValueTrimPrefix?: boolean | undefined;
                            uppercase?: boolean | undefined;
                            onValueChanged?: ((event: any) => void) | undefined;
                        } | undefined;
                        readonly pattern?: string | undefined;
                        color?: string | undefined;
                        type?: ("textarea" | "text" | "password" | (string & Record<never, never>)) | undefined;
                        preset?: string | undefined;
                        tabindex?: number | undefined;
                        modelValue?: string | number | undefined;
                        disabled?: boolean | undefined;
                        clearable?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        ariaLabel?: string | undefined;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<string>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        loading?: boolean | undefined;
                        background?: string | undefined;
                        outline?: boolean | undefined;
                        bordered?: boolean | undefined;
                        placeholder?: string | undefined;
                        maxLength?: number | undefined;
                        requiredMark?: boolean | undefined;
                        autosize?: boolean | undefined;
                        minRows?: number | undefined;
                        maxRows?: number | undefined;
                        inputClass?: string | undefined;
                        inputmode?: string | undefined;
                        counter?: boolean | undefined;
                        returnRaw?: boolean | undefined;
                        clearableIcon?: string | undefined;
                        clearValue?: string | undefined;
                    } | undefined;
                    VaList?: {
                        preset?: string | undefined;
                        fit?: boolean | undefined;
                    } | undefined;
                    VaListItem?: {
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        preset?: string | undefined;
                        disabled?: boolean | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                    } | undefined;
                    VaListItemLabel?: {
                        caption?: boolean | undefined;
                        preset?: string | undefined;
                        lines?: number | undefined;
                    } | undefined;
                    VaListItemSection?: {
                        preset?: string | undefined;
                        icon?: boolean | undefined;
                        avatar?: boolean | undefined;
                    } | undefined;
                    VaListLabel?: {
                        color?: string | undefined;
                        preset?: string | undefined;
                    } | undefined;
                    VaListSeparator?: {
                        preset?: string | undefined;
                        fit?: boolean | undefined;
                        spaced?: boolean | undefined;
                    } | undefined;
                    VaMessageList?: {
                        readonly color?: string | undefined;
                        modelValue?: string | string[] | undefined;
                        limit?: number | undefined;
                        hasError?: boolean | undefined;
                    } | undefined;
                    VaModal?: {
                        title?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        modelValue?: boolean | undefined;
                        stateful?: boolean | undefined;
                        blur?: boolean | undefined;
                        message?: string | undefined;
                        maxWidth?: string | undefined;
                        backgroundColor?: string | undefined;
                        noPadding?: boolean | undefined;
                        attachElement?: string | undefined;
                        allowBodyScroll?: boolean | undefined;
                        disableAttachment?: boolean | undefined;
                        okText?: string | undefined;
                        cancelText?: string | undefined;
                        hideDefaultActions?: boolean | undefined;
                        fullscreen?: boolean | undefined;
                        mobileFullscreen?: boolean | undefined;
                        noDismiss?: boolean | undefined;
                        noOutsideDismiss?: boolean | undefined;
                        noEscDismiss?: boolean | undefined;
                        maxHeight?: string | undefined;
                        readonly anchorClass?: string | undefined;
                        fixedLayout?: boolean | undefined;
                        withoutTransitions?: boolean | undefined;
                        overlay?: boolean | undefined;
                        overlayOpacity?: string | number | undefined;
                        zIndex?: string | number | undefined;
                        readonly beforeClose?: ((hide: () => void) => any) | undefined;
                    } | undefined;
                    VaNavbar?: {
                        fixed?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        bottom?: boolean | undefined;
                        hideOnScroll?: boolean | undefined;
                        readonly textColor?: string | undefined;
                        shape?: boolean | undefined;
                    } | undefined;
                    VaNavbarItem?: {} | undefined;
                    VaOptionList?: {
                        readonly?: boolean | undefined;
                        name?: string | undefined;
                        color?: string | undefined;
                        type?: "switch" | "checkbox" | "radio" | undefined;
                        preset?: string | undefined;
                        readonly modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[] | null | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        readonly defaultValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[] | null | undefined;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<any>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        leftLabel?: boolean | undefined;
                        options?: import("../../composables").SelectableOption[] | undefined;
                        textBy?: import("../../composables").StringOrFunction | undefined;
                        valueBy?: import("../../composables").StringOrFunction | undefined;
                        trackBy?: import("../../composables").StringOrFunction | undefined;
                        disabledBy?: import("../../composables").StringOrFunction | undefined;
                        groupBy?: import("../../composables").StringOrFunction | undefined;
                    } | undefined;
                    VaPagination?: {
                        input?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        modelValue?: number | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        borderColor?: string | undefined;
                        rounded?: boolean | undefined;
                        visiblePages?: number | undefined;
                        pages?: number | undefined;
                        boundaryLinks?: boolean | undefined;
                        boundaryNumbers?: boolean | undefined;
                        directionLinks?: boolean | undefined;
                        hideOnSinglePage?: boolean | undefined;
                        total?: number | undefined;
                        pageSize?: number | undefined;
                        boundaryIconLeft?: string | undefined;
                        boundaryIconRight?: string | undefined;
                        directionIconLeft?: string | undefined;
                        directionIconRight?: string | undefined;
                        gapped?: boolean | undefined;
                        activePageColor?: string | undefined;
                        buttonsPreset?: string | undefined;
                    } | undefined;
                    VaParallax?: {
                        preset?: string | undefined;
                        height?: number | undefined;
                        readonly target?: string | HTMLElement | undefined;
                        src?: string | undefined;
                        alt?: string | undefined;
                        speed?: number | undefined;
                        reversed?: boolean | undefined;
                    } | undefined;
                    VaPopover?: {
                        readonly?: boolean | undefined;
                        title?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: boolean | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        message?: string | undefined;
                        placement?: import("../../composables").PlacementWithAlias | undefined;
                        offset?: number | [number, number] | undefined;
                        keepAnchorWidth?: boolean | undefined;
                        autoPlacement?: boolean | undefined;
                        stickToEdges?: boolean | undefined;
                        target?: import("../../composables").MaybeHTMLElementOrSelector;
                        readonly textColor?: string | undefined;
                        anchorSelector?: string | undefined;
                        innerAnchorSelector?: string | undefined;
                        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                        preventOverflow?: boolean | undefined;
                        isContentHoverable?: boolean | undefined;
                        closeOnContentClick?: boolean | undefined;
                        closeOnClickOutside?: boolean | undefined;
                        closeOnAnchorClick?: boolean | undefined;
                        hoverOverTimeout?: number | undefined;
                        hoverOutTimeout?: number | undefined;
                        cursor?: boolean | undefined;
                        trigger?: string | undefined;
                        keyboardNavigation?: boolean | undefined;
                        autoHide?: boolean | undefined;
                    } | undefined;
                    VaProgressBar?: {
                        reverse?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: number | "small" | "medium" | "large" | undefined;
                        modelValue?: number | undefined;
                        max?: number | undefined;
                        indeterminate?: boolean | undefined;
                        rounded?: boolean | undefined;
                        buffer?: number | undefined;
                        contentInside?: boolean | undefined;
                        showPercent?: boolean | undefined;
                    } | undefined;
                    VaProgressCircle?: {
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: string | number | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        modelValue?: number | undefined;
                        indeterminate?: boolean | undefined;
                        thickness?: number | undefined;
                    } | undefined;
                    VaRadio?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        option?: any;
                        name?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        tabindex?: number | undefined;
                        modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                        disabled?: boolean | undefined;
                        leftLabel?: boolean | undefined;
                    } | undefined;
                    VaRating?: {
                        readonly?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: string | number | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        tabindex?: number | undefined;
                        hover?: boolean | undefined;
                        modelValue?: number | undefined;
                        icon?: string | undefined;
                        halfIcon?: string | undefined;
                        emptyIcon?: string | undefined;
                        halves?: boolean | undefined;
                        disabled?: boolean | undefined;
                        unselectedColor?: string | undefined;
                        itemNumber?: number | undefined;
                        numbers?: boolean | undefined;
                        max?: number | undefined;
                        texts?: string[] | undefined;
                        clearable?: boolean | undefined;
                        stateful?: boolean | undefined;
                    } | undefined;
                    VaSelect?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        tabindex?: number | undefined;
                        modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[] | undefined;
                        disabled?: boolean | undefined;
                        clearable?: boolean | undefined;
                        stateful?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        width?: string | undefined;
                        placement?: import("../../composables").Placement | undefined;
                        offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                        keepAnchorWidth?: boolean | undefined;
                        autoPlacement?: boolean | undefined;
                        stickToEdges?: boolean | undefined;
                        target?: import("../../composables").MaybeHTMLElementOrSelector;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<import("../../composables").SelectableOption>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        loading?: boolean | undefined;
                        options?: import("../../composables").SelectableOption[] | undefined;
                        textBy?: import("../../composables").StringOrFunction | undefined;
                        valueBy?: import("../../composables").StringOrFunction | undefined;
                        trackBy?: import("../../composables").StringOrFunction | undefined;
                        disabledBy?: import("../../composables").StringOrFunction | undefined;
                        groupBy?: import("../../composables").StringOrFunction | undefined;
                        delay?: number | undefined;
                        outline?: boolean | undefined;
                        bordered?: boolean | undefined;
                        separator?: string | undefined;
                        multiple?: boolean | undefined;
                        anchorSelector?: string | undefined;
                        innerAnchorSelector?: string | undefined;
                        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                        preventOverflow?: boolean | undefined;
                        isContentHoverable?: boolean | undefined;
                        closeOnContentClick?: boolean | undefined;
                        closeOnClickOutside?: boolean | undefined;
                        closeOnAnchorClick?: boolean | undefined;
                        hoverOverTimeout?: number | undefined;
                        hoverOutTimeout?: number | undefined;
                        cursor?: boolean | undefined;
                        trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                        keyboardNavigation?: boolean | undefined;
                        placeholder?: string | undefined;
                        requiredMark?: boolean | undefined;
                        clearableIcon?: string | undefined;
                        clearValue?: string | undefined;
                        autocomplete?: boolean | undefined;
                        virtualScroller?: boolean | undefined;
                        maxHeight?: string | undefined;
                        highlightMatchedText?: boolean | undefined;
                        minSearchChars?: number | undefined;
                        noOptionsText?: string | undefined;
                        autoSelectFirstOption?: boolean | undefined;
                        selectedTopShown?: boolean | undefined;
                        allowCreate?: boolean | "unique" | undefined;
                        searchable?: boolean | undefined;
                        hideSelected?: boolean | undefined;
                        searchPlaceholderText?: string | undefined;
                        dropdownIcon?: string | {
                            open: string;
                            close: string;
                        } | undefined;
                        maxVisibleOptions?: number | undefined;
                        maxSelections?: string | number | undefined;
                    } | undefined;
                    VaSeparator?: {} | undefined;
                    VaSkeleton?: {
                        tag?: string | undefined;
                        color?: string | undefined;
                        width?: string | undefined;
                        height?: string | undefined;
                        delay?: number | undefined;
                        animation?: "none" | "pulse" | "wave" | undefined;
                        lines?: number | undefined;
                        lineGap?: string | undefined;
                        lastLineWidth?: string | undefined;
                        variant?: "circle" | "text" | "rounded" | "squared" | undefined;
                    } | undefined;
                    VaSkeletonGroup?: {
                        color?: string | undefined;
                        delay?: number | undefined;
                        animation?: "none" | "pulse" | "wave" | undefined;
                        lines?: number | undefined;
                        lineGap?: string | undefined;
                        lastLineWidth?: string | undefined;
                    } | undefined;
                    VaSidebar?: {
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: boolean | undefined;
                        hoverOpacity?: number | undefined;
                        width?: string | undefined;
                        position?: "left" | "right" | undefined;
                        readonly textColor?: string | undefined;
                        borderColor?: string | undefined;
                        gradient?: boolean | undefined;
                        activeColor?: string | undefined;
                        hoverable?: boolean | undefined;
                        animated?: boolean | undefined;
                        hoverColor?: string | undefined;
                        minimized?: boolean | undefined;
                        minimizedWidth?: string | undefined;
                    } | undefined;
                    VaSidebarItem?: {
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        preset?: string | undefined;
                        disabled?: boolean | undefined;
                        hoverOpacity?: number | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        textColor?: string | undefined;
                        borderColor?: string | undefined;
                        activeColor?: string | undefined;
                        active?: boolean | undefined;
                        hoverColor?: string | undefined;
                    } | undefined;
                    VaSidebarItemContent?: {} | undefined;
                    VaSidebarItemTitle?: {} | undefined;
                    VaSlider?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: number | number[] | undefined;
                        disabled?: boolean | undefined;
                        max?: number | undefined;
                        step?: number | undefined;
                        min?: number | undefined;
                        range?: boolean | undefined;
                        readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
                        trackColor?: string | undefined;
                        labelColor?: string | undefined;
                        trackLabelVisible?: boolean | undefined;
                        invertLabel?: boolean | undefined;
                        pins?: boolean | undefined;
                        iconPrepend?: string | undefined;
                        iconAppend?: string | undefined;
                        showTrack?: boolean | undefined;
                    } | undefined;
                    VaSpacer?: {} | undefined;
                    VaSplit?: {
                        vertical?: boolean | undefined;
                        preset?: string | undefined;
                        modelValue?: number | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        maximization?: boolean | undefined;
                        maximizeStart?: boolean | undefined;
                        limits?: [import("../../components/va-split/types").SplitLimit, import("../../components/va-split/types").SplitLimit] | undefined;
                        snapping?: import("../../components/va-split/types").SnappingMark[] | undefined;
                        snappingRange?: string | number | undefined;
                    } | undefined;
                    VaSwitch?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        name?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        id?: string | undefined;
                        ariaLabel?: string | undefined;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<any>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        loading?: boolean | undefined;
                        arrayValue?: string | number | boolean | Record<string, any> | undefined;
                        leftLabel?: boolean | undefined;
                        trueValue?: boolean | undefined;
                        falseValue?: boolean | undefined;
                        indeterminate?: boolean | undefined;
                        indeterminateValue?: null | undefined;
                        trueLabel?: string | undefined;
                        falseLabel?: string | undefined;
                        trueInnerLabel?: string | undefined;
                        falseInnerLabel?: string | undefined;
                        offColor?: string | undefined;
                    } | undefined;
                    VaTabs?: {
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: string | number | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        left?: boolean | undefined;
                        center?: boolean | undefined;
                        right?: boolean | undefined;
                        grow?: boolean | undefined;
                        hidePagination?: boolean | undefined;
                        hideSlider?: boolean | undefined;
                        prevIcon?: string | undefined;
                        nextIcon?: string | undefined;
                    } | undefined;
                    VaTab?: {
                        replace?: boolean | undefined;
                        label?: string | undefined;
                        readonly name?: string | number | undefined;
                        tag?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        href?: string | undefined;
                        append?: boolean | undefined;
                        to?: string | Record<string, any> | undefined;
                        exact?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        target?: string | undefined;
                        selected?: boolean | undefined;
                    } | undefined;
                    VaStepper?: {
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        modelValue?: number | undefined;
                        stateful?: boolean | undefined;
                        steps?: {
                            label: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        }[] | undefined;
                        nextDisabled?: boolean | undefined;
                        finishButtonHidden?: boolean | undefined;
                        navigationDisabled?: boolean | undefined;
                        controlsHidden?: boolean | undefined;
                    } | undefined;
                    VaTimeInput?: {
                        readonly?: boolean | undefined;
                        label?: string | undefined;
                        view?: "hours" | "minutes" | "seconds" | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        modelValue?: {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        } | undefined;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                        clearable?: boolean | undefined;
                        stateful?: boolean | undefined;
                        success?: boolean | undefined;
                        error?: boolean | undefined;
                        placement?: import("../../composables").PlacementWithAlias | undefined;
                        offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                        keepAnchorWidth?: boolean | undefined;
                        autoPlacement?: boolean | undefined;
                        stickToEdges?: boolean | undefined;
                        counterValue?: number | undefined;
                        target?: import("../../composables").MaybeHTMLElementOrSelector;
                        errorMessages?: string | string[] | undefined;
                        errorCount?: string | number | undefined;
                        rules?: import("../../composables").ValidationRule<Date>[] | undefined;
                        messages?: string | string[] | undefined;
                        immediateValidation?: boolean | undefined;
                        loading?: boolean | undefined;
                        background?: string | undefined;
                        outline?: boolean | undefined;
                        bordered?: boolean | undefined;
                        leftIcon?: boolean | undefined;
                        anchorSelector?: string | undefined;
                        innerAnchorSelector?: string | undefined;
                        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                        preventOverflow?: boolean | undefined;
                        isContentHoverable?: boolean | undefined;
                        closeOnContentClick?: boolean | undefined;
                        closeOnClickOutside?: boolean | undefined;
                        closeOnAnchorClick?: boolean | undefined;
                        hoverOverTimeout?: number | undefined;
                        hoverOutTimeout?: number | undefined;
                        cursor?: boolean | undefined;
                        trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                        keyboardNavigation?: boolean | undefined;
                        maxLength?: number | undefined;
                        focused?: boolean | undefined;
                        requiredMark?: boolean | undefined;
                        clearableIcon?: string | undefined;
                        clearValue?: {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        } | undefined;
                        manualInput?: boolean | undefined;
                        isOpen?: boolean | undefined;
                        readonly format?: ((date?: Date | undefined) => string) | undefined;
                        readonly parse?: ((input: string) => Date) | undefined;
                        cellHeight?: number | undefined;
                        ampm?: boolean | undefined;
                        hidePeriodSwitch?: boolean | undefined;
                        periodUpdatesModelValue?: boolean | undefined;
                        hoursFilter?: ((h: number) => boolean) | undefined;
                        minutesFilter?: ((h: number) => boolean) | undefined;
                        secondsFilter?: ((h: number) => boolean) | undefined;
                        framed?: boolean | undefined;
                        visibleCellsCount?: number | undefined;
                    } | undefined;
                    VaTimeline?: {} | undefined;
                    VaTimelineItem?: {
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        active?: boolean | undefined;
                        activePrevious?: boolean | undefined;
                        activeNext?: boolean | undefined;
                        isFirst?: boolean | undefined;
                        isLast?: boolean | undefined;
                        inverted?: boolean | undefined;
                    } | undefined;
                    VaTimePicker?: {
                        readonly?: boolean | undefined;
                        view?: "hours" | "minutes" | "seconds" | undefined;
                        preset?: string | undefined;
                        readonly modelValue?: {
                            toString: () => string;
                            toDateString: () => string;
                            toTimeString: () => string;
                            toLocaleString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleDateString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            toLocaleTimeString: {
                                (): string;
                                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                            };
                            valueOf: () => number;
                            getTime: () => number;
                            getFullYear: () => number;
                            getUTCFullYear: () => number;
                            getMonth: () => number;
                            getUTCMonth: () => number;
                            getDate: () => number;
                            getUTCDate: () => number;
                            getDay: () => number;
                            getUTCDay: () => number;
                            getHours: () => number;
                            getUTCHours: () => number;
                            getMinutes: () => number;
                            getUTCMinutes: () => number;
                            getSeconds: () => number;
                            getUTCSeconds: () => number;
                            getMilliseconds: () => number;
                            getUTCMilliseconds: () => number;
                            getTimezoneOffset: () => number;
                            setTime: (time: number) => number;
                            setMilliseconds: (ms: number) => number;
                            setUTCMilliseconds: (ms: number) => number;
                            setSeconds: (sec: number, ms?: number | undefined) => number;
                            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                            setDate: (date: number) => number;
                            setUTCDate: (date: number) => number;
                            setMonth: (month: number, date?: number | undefined) => number;
                            setUTCMonth: (month: number, date?: number | undefined) => number;
                            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                            toUTCString: () => string;
                            toISOString: () => string;
                            toJSON: (key?: any) => string;
                            [Symbol.toPrimitive]: {
                                (hint: "default"): string;
                                (hint: "string"): string;
                                (hint: "number"): number;
                                (hint: string): string | number;
                            };
                        } | undefined;
                        disabled?: boolean | undefined;
                        stateful?: boolean | undefined;
                        cellHeight?: number | undefined;
                        ampm?: boolean | undefined;
                        hidePeriodSwitch?: boolean | undefined;
                        periodUpdatesModelValue?: boolean | undefined;
                        readonly hoursFilter?: ((h: number) => boolean) | undefined;
                        readonly minutesFilter?: ((h: number) => boolean) | undefined;
                        readonly secondsFilter?: ((h: number) => boolean) | undefined;
                        framed?: boolean | undefined;
                        visibleCellsCount?: number | undefined;
                    } | undefined;
                    VaToast?: {
                        readonly render?: Function | undefined;
                        title?: string | undefined;
                        color?: string | undefined;
                        preset?: string | undefined;
                        icon?: string | undefined;
                        message?: string | Function | undefined;
                        position?: import("../../components").ToastPosition | undefined;
                        duration?: number | undefined;
                        offsetX?: number | undefined;
                        offsetY?: number | undefined;
                        closeable?: boolean | undefined;
                        multiLine?: boolean | undefined;
                        dangerouslyUseHtmlString?: boolean | undefined;
                        customClass?: string | undefined;
                    } | undefined;
                    VaTreeView?: {
                        filter?: string | undefined;
                        color?: string | undefined;
                        stateful?: boolean | undefined;
                        textBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        valueBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        trackBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        disabledBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        expanded?: (string | number | {
                            [x: string]: any;
                            id: string | number;
                            level?: number | undefined;
                            checked?: boolean | null | undefined;
                            disabled?: boolean | undefined;
                            expanded?: boolean | undefined;
                            hasChildren?: boolean | undefined;
                            matchesFilter?: boolean | undefined;
                            indeterminate?: boolean | undefined;
                        })[] | undefined;
                        checked?: (string | number | {
                            [x: string]: any;
                            id: string | number;
                            level?: number | undefined;
                            checked?: boolean | null | undefined;
                            disabled?: boolean | undefined;
                            expanded?: boolean | undefined;
                            hasChildren?: boolean | undefined;
                            matchesFilter?: boolean | undefined;
                            indeterminate?: boolean | undefined;
                        })[] | undefined;
                        selectable?: boolean | undefined;
                        filterMethod?: import("../../components/va-tree-view/types").TreeViewFilterMethod | undefined;
                        iconBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        expandNodeBy?: "leaf" | "node" | undefined;
                        nodes?: {
                            [x: string]: any;
                            id: string | number;
                            level?: number | undefined;
                            checked?: boolean | null | undefined;
                            disabled?: boolean | undefined;
                            expanded?: boolean | undefined;
                            hasChildren?: boolean | undefined;
                            matchesFilter?: boolean | undefined;
                            indeterminate?: boolean | undefined;
                        }[] | undefined;
                        selectionType?: string | undefined;
                        expandedBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        checkedBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        childrenBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                        expandAll?: boolean | undefined;
                    } | undefined;
                    VaScrollContainer?: {
                        horizontal?: boolean | undefined;
                        vertical?: boolean | undefined;
                        color?: string | undefined;
                        size?: "small" | "medium" | "large" | undefined;
                        sizesConfig?: Record<string, any> | undefined;
                        fontSizesConfig?: Record<string, any> | undefined;
                        gradient?: boolean | undefined;
                        rtl?: boolean | undefined;
                    } | undefined;
                    VaViewer?: {} | undefined;
                    VaVirtualScroller?: {
                        table?: boolean | undefined;
                        horizontal?: boolean | undefined;
                        disabled?: boolean | undefined;
                        trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
                        items?: unknown[] | undefined;
                        bench?: number | undefined;
                        itemSize?: string | number | undefined;
                        wrapperSize?: string | number | undefined;
                    } | undefined;
                    all?: import("../component-config").Props | undefined;
                    presets?: {
                        VaAccordion?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaAffix?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaAlert?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaAppBar?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaAspectRatio?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaAvatar?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaAvatarGroup?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaBacktop?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaBadge?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaBreadcrumbs?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaBreadcrumbsItem?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaButton?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaButtonDropdown?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaButtonGroup?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaButtonToggle?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCard?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCardBlock?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCardActions?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCardContent?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCardTitle?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCarousel?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCheckbox?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaChip?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCollapse?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaColorIndicator?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaColorInput?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaColorPalette?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaConfig?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaContent?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaCounter?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaDataTable?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaDateInput?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaDatePicker?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaDivider?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaDropdown?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaDropdownContent?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaFallback?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaFileUpload?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaForm?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaHover?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaIcon?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaImage?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaInfiniteScroll?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaInnerLoading?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaInput?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaList?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaListItem?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaListItemLabel?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaListItemSection?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaListLabel?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaListSeparator?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaMessageList?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaModal?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaNavbar?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaNavbarItem?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaOptionList?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaPagination?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaParallax?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaPopover?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaProgressBar?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaProgressCircle?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaRadio?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaRating?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSelect?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSeparator?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSkeleton?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSkeletonGroup?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSidebar?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSidebarItem?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSidebarItemContent?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSidebarItemTitle?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSlider?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSpacer?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSplit?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaSwitch?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTabs?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTab?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaStepper?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTimeInput?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTimeline?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTimelineItem?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTimePicker?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaToast?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaTreeView?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaScrollContainer?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaViewer?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                        VaVirtualScroller?: {
                            [presetName: string]: import("../component-config").Props;
                        } | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            VaContent?: {} | undefined;
            VaCounter?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                flat?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | undefined;
                disabled?: boolean | undefined;
                max?: number | undefined;
                stateful?: boolean | undefined;
                step?: number | undefined;
                width?: string | number | undefined;
                messages?: string | string[] | undefined;
                buttons?: boolean | undefined;
                textColor?: string | undefined;
                outline?: boolean | undefined;
                bordered?: boolean | undefined;
                min?: number | undefined;
                manualInput?: boolean | undefined;
                increaseIcon?: string | undefined;
                decreaseIcon?: string | undefined;
                rounded?: boolean | undefined;
                margins?: string | number | undefined;
            } | undefined;
            VaDataTable?: {
                table?: boolean | undefined;
                filter?: string | undefined;
                horizontal?: boolean | undefined;
                preset?: string | undefined;
                readonly modelValue?: any[] | undefined;
                disabled?: boolean | undefined;
                readonly height?: string | number | undefined;
                loading?: boolean | undefined;
                trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
                delay?: number | undefined;
                items?: import("../../components").DataTableItem[] | undefined;
                grid?: boolean | undefined;
                selectMode?: import("../../components").DataTableSelectMode | undefined;
                columns?: (string | {
                    [x: string]: any;
                    key: string;
                    name?: string | undefined;
                    label?: string | undefined;
                    thTitle?: string | undefined;
                    sortable?: boolean | undefined;
                    sortingFn?: ((a: any, b: any) => number) | undefined;
                    sortingOptions?: import("../../components").DataTableSortingOrder[] | undefined;
                    thAlign?: import("../../components").DataTableAlignOptions | undefined;
                    thVerticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    tdAlign?: import("../../components").DataTableAlignOptions | undefined;
                    tdVerticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    width?: string | number | undefined;
                    thClass?: unknown;
                    tdClass?: unknown;
                    thStyle?: unknown;
                    tdStyle?: unknown;
                    headerTitle?: string | undefined;
                    alignHead?: import("../../components").DataTableAlignOptions | undefined;
                    verticalAlignHead?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    align?: import("../../components").DataTableAlignOptions | undefined;
                    verticalAlign?: import("../../components").DataTableVerticalAlignOptions | undefined;
                    classes?: unknown;
                    headerClasses?: unknown;
                    style?: unknown;
                    headerStyle?: unknown;
                })[] | undefined;
                selectedColor?: string | undefined;
                allowFooterSorting?: boolean | undefined;
                stickyHeader?: boolean | undefined;
                stickyFooter?: boolean | undefined;
                selectable?: boolean | undefined;
                bench?: number | undefined;
                itemSize?: string | number | undefined;
                wrapperSize?: string | number | undefined;
                hoverable?: boolean | undefined;
                clickable?: boolean | undefined;
                loadingColor?: string | undefined;
                noDataHtml?: string | undefined;
                noDataFilteredHtml?: string | undefined;
                hideDefaultHeader?: boolean | undefined;
                footerClone?: boolean | undefined;
                striped?: boolean | undefined;
                virtualScroller?: boolean | undefined;
                virtualTrackBy?: string | number | undefined;
                gridColumns?: number | undefined;
                itemsTrackBy?: string | ((item: import("../../components").DataTableItem) => any) | undefined;
                readonly perPage?: number | undefined;
                readonly currentPage?: number | undefined;
                readonly filterMethod?: import("../../components").DataTableFilterMethod | undefined;
                sortingOptions?: import("../../components").DataTableSortingOrder[] | undefined;
                readonly sortBy?: string | undefined;
                readonly sortingOrder?: import("../../components").DataTableSortingOrder | undefined;
                scrollTopMargin?: number | undefined;
                scrollBottomMargin?: number | undefined;
                readonly rowBind?: import("../../components").DataTableRowBind | undefined;
                readonly cellBind?: import("../../components").DataTableCellBind | undefined;
                animated?: boolean | undefined;
            } | undefined;
            VaDateInput?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                view?: {
                    type: import("../../components/va-date-picker/types").DatePickerViewType;
                    year: number;
                    month: number;
                } | undefined;
                color?: string | undefined;
                type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
                preset?: string | undefined;
                mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
                readonly modelValue?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[] | {
                    start?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                    end?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                } | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                clearable?: boolean | undefined;
                stateful?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                keepAnchorWidth?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                counterValue?: number | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<import("../../components/va-date-input/types").DateInputModelValue>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                loading?: boolean | undefined;
                background?: string | undefined;
                textColor?: string | undefined;
                outline?: boolean | undefined;
                bordered?: boolean | undefined;
                leftIcon?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                preventOverflow?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                cursor?: boolean | undefined;
                trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                keyboardNavigation?: boolean | undefined;
                maxLength?: number | undefined;
                focused?: boolean | undefined;
                requiredMark?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[] | {
                    start?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                    end?: string | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                } | undefined;
                manualInput?: boolean | undefined;
                highlightWeekend?: boolean | undefined;
                highlightToday?: boolean | undefined;
                monthNames?: string[] | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: "Monday" | "Sunday" | undefined;
                hideWeekDays?: boolean | undefined;
                showOtherMonths?: boolean | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: number | undefined;
                endYear?: number | undefined;
                weekendsColor?: string | undefined;
                resetOnClose?: boolean | undefined;
                isOpen?: boolean | undefined;
                readonly format?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => string) | undefined;
                formatDate?: ((date: Date) => string) | undefined;
                readonly parse?: ((input: string) => import("../../components/va-date-input/types").DateInputValue) | undefined;
                readonly parseDate?: ((input: string) => Date) | undefined;
                readonly parseValue?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => import("../../components/va-date-picker/types").DatePickerModelValue) | undefined;
                delimiter?: string | undefined;
                rangeDelimiter?: string | undefined;
            } | undefined;
            VaDatePicker?: {
                readonly?: boolean | undefined;
                readonly view?: {
                    type: import("../../components/va-date-picker/types").DatePickerViewType;
                    year: number;
                    month: number;
                } | undefined;
                color?: string | undefined;
                type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
                preset?: string | undefined;
                mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
                readonly modelValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                }[] | {
                    start?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                    end?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | null | undefined;
                } | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                textColor?: string | undefined;
                highlightWeekend?: boolean | undefined;
                highlightToday?: boolean | undefined;
                monthNames?: string[] | undefined;
                weekdayNames?: string[] | undefined;
                firstWeekday?: "Monday" | "Sunday" | undefined;
                hideWeekDays?: boolean | undefined;
                showOtherMonths?: boolean | undefined;
                allowedDays?: ((date: Date) => boolean) | undefined;
                weekends?: ((date: Date) => boolean) | undefined;
                allowedMonths?: ((date: Date) => boolean) | undefined;
                allowedYears?: ((date: Date) => boolean) | undefined;
                startYear?: number | undefined;
                endYear?: number | undefined;
                weekendsColor?: string | undefined;
            } | undefined;
            VaDivider?: {
                vertical?: boolean | undefined;
                preset?: string | undefined;
                orientation?: "left" | "center" | "right" | undefined;
                inset?: boolean | undefined;
                dashed?: boolean | undefined;
            } | undefined;
            VaDropdown?: {
                readonly?: boolean | undefined;
                preset?: string | undefined;
                readonly modelValue?: boolean | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                keepAnchorWidth?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                preventOverflow?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                cursor?: boolean | undefined;
                trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                keyboardNavigation?: boolean | undefined;
            } | undefined;
            VaDropdownContent?: {
                background?: string | undefined;
                readonly textColor?: string | undefined;
                noPadding?: boolean | undefined;
            } | undefined;
            VaFallback?: {
                readonly fallbackSrc?: string | undefined;
                readonly fallbackText?: string | undefined;
                readonly fallbackIcon?: string | undefined;
                readonly fallbackRender?: (() => any) | undefined;
            } | undefined;
            VaFileUpload?: {
                color?: string | undefined;
                type?: "list" | "single" | "gallery" | undefined;
                preset?: string | undefined;
                modelValue?: {
                    url?: string | undefined;
                    readonly lastModified?: number | undefined;
                    readonly name?: string | undefined;
                    readonly webkitRelativePath?: string | undefined;
                    readonly size?: number | undefined;
                    readonly type?: string | undefined;
                    arrayBuffer?: (() => Promise<ArrayBuffer>) | undefined;
                    slice?: ((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined;
                    stream?: (() => ReadableStream<any>) | undefined;
                    text?: (() => Promise<string>) | undefined;
                } | {
                    url?: string | undefined;
                    readonly lastModified?: number | undefined;
                    readonly name?: string | undefined;
                    readonly webkitRelativePath?: string | undefined;
                    readonly size?: number | undefined;
                    readonly type?: string | undefined;
                    arrayBuffer?: (() => Promise<ArrayBuffer>) | undefined;
                    slice?: ((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined;
                    stream?: (() => ReadableStream<any>) | undefined;
                    text?: (() => Promise<string>) | undefined;
                }[] | undefined;
                disabled?: boolean | undefined;
                undo?: boolean | undefined;
                dropzone?: boolean | undefined;
                undoDuration?: number | undefined;
                undoButtonText?: string | undefined;
                deletedFileMessage?: string | undefined;
                fileTypes?: string | undefined;
                hideFileList?: boolean | undefined;
                dropZoneText?: string | undefined;
                uploadButtonText?: string | undefined;
            } | undefined;
            VaForm?: {
                tag?: string | undefined;
                preset?: string | undefined;
                autofocus?: boolean | undefined;
            } | undefined;
            VaHover?: {
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
            } | undefined;
            VaIcon?: {
                name?: string | undefined;
                readonly tag?: string | undefined;
                readonly component?: any;
                readonly color?: string | undefined;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
                flip?: "off" | "horizontal" | "vertical" | "both" | undefined;
                preset?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
            } | undefined;
            VaImage?: {
                title?: string | undefined;
                preset?: string | undefined;
                sizes?: string | undefined;
                maxWidth?: number | undefined;
                draggable?: boolean | undefined;
                readonly loading?: "lazy" | "eager" | undefined;
                fallbackSrc?: string | undefined;
                fallbackText?: string | undefined;
                fallbackIcon?: string | undefined;
                fallbackRender?: (() => any) | undefined;
                readonly src?: string | undefined;
                ratio?: number | "auto" | undefined;
                alt?: string | undefined;
                lazy?: boolean | undefined;
                contain?: boolean | undefined;
                fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
                placeholderSrc?: string | undefined;
                srcset?: string | undefined;
                readonly crossorigin?: "anonymous" | "use-credentials" | undefined;
                readonly decoding?: "auto" | "sync" | "async" | undefined;
                fetchpriority?: "auto" | "high" | "low" | undefined;
                readonly referrerpolicy?: "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
            } | undefined;
            VaInfiniteScroll?: {
                reverse?: boolean | undefined;
                tag?: string | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                readonly load: Function;
                offset?: number | undefined;
                scrollTarget?: string | HTMLElement | undefined;
                debounce?: number | undefined;
            } | undefined;
            VaInnerLoading?: {
                readonly color?: string | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                icon?: string | undefined;
                loading?: boolean | undefined;
            } | undefined;
            VaInput?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                mask?: string | Record<string, number[]> | {
                    creditCard?: boolean | undefined;
                    creditCardStrictMode?: boolean | undefined;
                    creditCardType?: string | undefined;
                    onCreditCardTypeChanged?: import("cleave.js/options/creditCard").CreditCardTypeChangeHandler | undefined;
                    phone?: boolean | undefined;
                    phoneRegionCode?: string | undefined;
                    date?: boolean | undefined;
                    dateMin?: string | undefined;
                    dateMax?: string | undefined;
                    datePattern?: readonly string[] | undefined;
                    time?: boolean | undefined;
                    timePattern?: readonly string[] | undefined;
                    timeFormat?: string | undefined;
                    numeral?: boolean | undefined;
                    numeralDecimalMark?: string | undefined;
                    numeralDecimalScale?: number | undefined;
                    numeralIntegerScale?: number | undefined;
                    numeralPositiveOnly?: boolean | undefined;
                    numeralThousandsGroupStyle?: import("cleave.js/options").NumeralThousandsGroupStyleType | undefined;
                    stripLeadingZeroes?: boolean | undefined;
                    tailPrefix?: boolean | undefined;
                    blocks?: readonly number[] | undefined;
                    copyDelimiter?: boolean | undefined;
                    delimiter?: string | undefined;
                    delimiters?: readonly string[] | undefined;
                    delimiterLazyShow?: boolean | undefined;
                    initValue?: any;
                    lowercase?: boolean | undefined;
                    numericOnly?: boolean | undefined;
                    prefix?: string | undefined;
                    noImmediatePrefix?: boolean | undefined;
                    rawValueTrimPrefix?: boolean | undefined;
                    uppercase?: boolean | undefined;
                    onValueChanged?: ((event: any) => void) | undefined;
                } | undefined;
                readonly pattern?: string | undefined;
                color?: string | undefined;
                type?: ("textarea" | "text" | "password" | (string & Record<never, never>)) | undefined;
                preset?: string | undefined;
                tabindex?: number | undefined;
                modelValue?: string | number | undefined;
                disabled?: boolean | undefined;
                clearable?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                ariaLabel?: string | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<string>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                loading?: boolean | undefined;
                background?: string | undefined;
                outline?: boolean | undefined;
                bordered?: boolean | undefined;
                placeholder?: string | undefined;
                maxLength?: number | undefined;
                requiredMark?: boolean | undefined;
                autosize?: boolean | undefined;
                minRows?: number | undefined;
                maxRows?: number | undefined;
                inputClass?: string | undefined;
                inputmode?: string | undefined;
                counter?: boolean | undefined;
                returnRaw?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
            } | undefined;
            VaList?: {
                preset?: string | undefined;
                fit?: boolean | undefined;
            } | undefined;
            VaListItem?: {
                replace?: boolean | undefined;
                tag?: string | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
            } | undefined;
            VaListItemLabel?: {
                caption?: boolean | undefined;
                preset?: string | undefined;
                lines?: number | undefined;
            } | undefined;
            VaListItemSection?: {
                preset?: string | undefined;
                icon?: boolean | undefined;
                avatar?: boolean | undefined;
            } | undefined;
            VaListLabel?: {
                color?: string | undefined;
                preset?: string | undefined;
            } | undefined;
            VaListSeparator?: {
                preset?: string | undefined;
                fit?: boolean | undefined;
                spaced?: boolean | undefined;
            } | undefined;
            VaMessageList?: {
                readonly color?: string | undefined;
                modelValue?: string | string[] | undefined;
                limit?: number | undefined;
                hasError?: boolean | undefined;
            } | undefined;
            VaModal?: {
                title?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                modelValue?: boolean | undefined;
                stateful?: boolean | undefined;
                blur?: boolean | undefined;
                message?: string | undefined;
                maxWidth?: string | undefined;
                backgroundColor?: string | undefined;
                noPadding?: boolean | undefined;
                attachElement?: string | undefined;
                allowBodyScroll?: boolean | undefined;
                disableAttachment?: boolean | undefined;
                okText?: string | undefined;
                cancelText?: string | undefined;
                hideDefaultActions?: boolean | undefined;
                fullscreen?: boolean | undefined;
                mobileFullscreen?: boolean | undefined;
                noDismiss?: boolean | undefined;
                noOutsideDismiss?: boolean | undefined;
                noEscDismiss?: boolean | undefined;
                maxHeight?: string | undefined;
                readonly anchorClass?: string | undefined;
                fixedLayout?: boolean | undefined;
                withoutTransitions?: boolean | undefined;
                overlay?: boolean | undefined;
                overlayOpacity?: string | number | undefined;
                zIndex?: string | number | undefined;
                readonly beforeClose?: ((hide: () => void) => any) | undefined;
            } | undefined;
            VaNavbar?: {
                fixed?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                bottom?: boolean | undefined;
                hideOnScroll?: boolean | undefined;
                readonly textColor?: string | undefined;
                shape?: boolean | undefined;
            } | undefined;
            VaNavbarItem?: {} | undefined;
            VaOptionList?: {
                readonly?: boolean | undefined;
                name?: string | undefined;
                color?: string | undefined;
                type?: "switch" | "checkbox" | "radio" | undefined;
                preset?: string | undefined;
                readonly modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[] | null | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                readonly defaultValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[] | null | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                leftLabel?: boolean | undefined;
                options?: import("../../composables").SelectableOption[] | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
            } | undefined;
            VaPagination?: {
                input?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                modelValue?: number | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                borderColor?: string | undefined;
                rounded?: boolean | undefined;
                visiblePages?: number | undefined;
                pages?: number | undefined;
                boundaryLinks?: boolean | undefined;
                boundaryNumbers?: boolean | undefined;
                directionLinks?: boolean | undefined;
                hideOnSinglePage?: boolean | undefined;
                total?: number | undefined;
                pageSize?: number | undefined;
                boundaryIconLeft?: string | undefined;
                boundaryIconRight?: string | undefined;
                directionIconLeft?: string | undefined;
                directionIconRight?: string | undefined;
                gapped?: boolean | undefined;
                activePageColor?: string | undefined;
                buttonsPreset?: string | undefined;
            } | undefined;
            VaParallax?: {
                preset?: string | undefined;
                height?: number | undefined;
                readonly target?: string | HTMLElement | undefined;
                src?: string | undefined;
                alt?: string | undefined;
                speed?: number | undefined;
                reversed?: boolean | undefined;
            } | undefined;
            VaPopover?: {
                readonly?: boolean | undefined;
                title?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                message?: string | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: number | [number, number] | undefined;
                keepAnchorWidth?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                readonly textColor?: string | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                preventOverflow?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                cursor?: boolean | undefined;
                trigger?: string | undefined;
                keyboardNavigation?: boolean | undefined;
                autoHide?: boolean | undefined;
            } | undefined;
            VaProgressBar?: {
                reverse?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                size?: number | "small" | "medium" | "large" | undefined;
                modelValue?: number | undefined;
                max?: number | undefined;
                indeterminate?: boolean | undefined;
                rounded?: boolean | undefined;
                buffer?: number | undefined;
                contentInside?: boolean | undefined;
                showPercent?: boolean | undefined;
            } | undefined;
            VaProgressCircle?: {
                color?: string | undefined;
                preset?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                modelValue?: number | undefined;
                indeterminate?: boolean | undefined;
                thickness?: number | undefined;
            } | undefined;
            VaRadio?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                option?: any;
                name?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                tabindex?: number | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
                disabled?: boolean | undefined;
                leftLabel?: boolean | undefined;
            } | undefined;
            VaRating?: {
                readonly?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                size?: string | number | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                tabindex?: number | undefined;
                hover?: boolean | undefined;
                modelValue?: number | undefined;
                icon?: string | undefined;
                halfIcon?: string | undefined;
                emptyIcon?: string | undefined;
                halves?: boolean | undefined;
                disabled?: boolean | undefined;
                unselectedColor?: string | undefined;
                itemNumber?: number | undefined;
                numbers?: boolean | undefined;
                max?: number | undefined;
                texts?: string[] | undefined;
                clearable?: boolean | undefined;
                stateful?: boolean | undefined;
            } | undefined;
            VaSelect?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                tabindex?: number | undefined;
                modelValue?: import("../../composables").SelectableOption | import("../../composables").SelectableOption[] | undefined;
                disabled?: boolean | undefined;
                clearable?: boolean | undefined;
                stateful?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                width?: string | undefined;
                placement?: import("../../composables").Placement | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                keepAnchorWidth?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<import("../../composables").SelectableOption>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                loading?: boolean | undefined;
                options?: import("../../composables").SelectableOption[] | undefined;
                textBy?: import("../../composables").StringOrFunction | undefined;
                valueBy?: import("../../composables").StringOrFunction | undefined;
                trackBy?: import("../../composables").StringOrFunction | undefined;
                disabledBy?: import("../../composables").StringOrFunction | undefined;
                groupBy?: import("../../composables").StringOrFunction | undefined;
                delay?: number | undefined;
                outline?: boolean | undefined;
                bordered?: boolean | undefined;
                separator?: string | undefined;
                multiple?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                preventOverflow?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                cursor?: boolean | undefined;
                trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                keyboardNavigation?: boolean | undefined;
                placeholder?: string | undefined;
                requiredMark?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: string | undefined;
                autocomplete?: boolean | undefined;
                virtualScroller?: boolean | undefined;
                maxHeight?: string | undefined;
                highlightMatchedText?: boolean | undefined;
                minSearchChars?: number | undefined;
                noOptionsText?: string | undefined;
                autoSelectFirstOption?: boolean | undefined;
                selectedTopShown?: boolean | undefined;
                allowCreate?: boolean | "unique" | undefined;
                searchable?: boolean | undefined;
                hideSelected?: boolean | undefined;
                searchPlaceholderText?: string | undefined;
                dropdownIcon?: string | {
                    open: string;
                    close: string;
                } | undefined;
                maxVisibleOptions?: number | undefined;
                maxSelections?: string | number | undefined;
            } | undefined;
            VaSeparator?: {} | undefined;
            VaSkeleton?: {
                tag?: string | undefined;
                color?: string | undefined;
                width?: string | undefined;
                height?: string | undefined;
                delay?: number | undefined;
                animation?: "none" | "pulse" | "wave" | undefined;
                lines?: number | undefined;
                lineGap?: string | undefined;
                lastLineWidth?: string | undefined;
                variant?: "circle" | "text" | "rounded" | "squared" | undefined;
            } | undefined;
            VaSkeletonGroup?: {
                color?: string | undefined;
                delay?: number | undefined;
                animation?: "none" | "pulse" | "wave" | undefined;
                lines?: number | undefined;
                lineGap?: string | undefined;
                lastLineWidth?: string | undefined;
            } | undefined;
            VaSidebar?: {
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                hoverOpacity?: number | undefined;
                width?: string | undefined;
                position?: "left" | "right" | undefined;
                readonly textColor?: string | undefined;
                borderColor?: string | undefined;
                gradient?: boolean | undefined;
                activeColor?: string | undefined;
                hoverable?: boolean | undefined;
                animated?: boolean | undefined;
                hoverColor?: string | undefined;
                minimized?: boolean | undefined;
                minimizedWidth?: string | undefined;
            } | undefined;
            VaSidebarItem?: {
                replace?: boolean | undefined;
                tag?: string | undefined;
                preset?: string | undefined;
                disabled?: boolean | undefined;
                hoverOpacity?: number | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                textColor?: string | undefined;
                borderColor?: string | undefined;
                activeColor?: string | undefined;
                active?: boolean | undefined;
                hoverColor?: string | undefined;
            } | undefined;
            VaSidebarItemContent?: {} | undefined;
            VaSidebarItemTitle?: {} | undefined;
            VaSlider?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: number | number[] | undefined;
                disabled?: boolean | undefined;
                max?: number | undefined;
                step?: number | undefined;
                min?: number | undefined;
                range?: boolean | undefined;
                readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
                trackColor?: string | undefined;
                labelColor?: string | undefined;
                trackLabelVisible?: boolean | undefined;
                invertLabel?: boolean | undefined;
                pins?: boolean | undefined;
                iconPrepend?: string | undefined;
                iconAppend?: string | undefined;
                showTrack?: boolean | undefined;
            } | undefined;
            VaSpacer?: {} | undefined;
            VaSplit?: {
                vertical?: boolean | undefined;
                preset?: string | undefined;
                modelValue?: number | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                maximization?: boolean | undefined;
                maximizeStart?: boolean | undefined;
                limits?: [import("../../components/va-split/types").SplitLimit, import("../../components/va-split/types").SplitLimit] | undefined;
                snapping?: import("../../components/va-split/types").SnappingMark[] | undefined;
                snappingRange?: string | number | undefined;
            } | undefined;
            VaSwitch?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                name?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                id?: string | undefined;
                ariaLabel?: string | undefined;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                loading?: boolean | undefined;
                arrayValue?: string | number | boolean | Record<string, any> | undefined;
                leftLabel?: boolean | undefined;
                trueValue?: boolean | undefined;
                falseValue?: boolean | undefined;
                indeterminate?: boolean | undefined;
                indeterminateValue?: null | undefined;
                trueLabel?: string | undefined;
                falseLabel?: string | undefined;
                trueInnerLabel?: string | undefined;
                falseInnerLabel?: string | undefined;
                offColor?: string | undefined;
            } | undefined;
            VaTabs?: {
                vertical?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: string | number | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                left?: boolean | undefined;
                center?: boolean | undefined;
                right?: boolean | undefined;
                grow?: boolean | undefined;
                hidePagination?: boolean | undefined;
                hideSlider?: boolean | undefined;
                prevIcon?: string | undefined;
                nextIcon?: string | undefined;
            } | undefined;
            VaTab?: {
                replace?: boolean | undefined;
                label?: string | undefined;
                readonly name?: string | number | undefined;
                tag?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                href?: string | undefined;
                append?: boolean | undefined;
                to?: string | Record<string, any> | undefined;
                exact?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                target?: string | undefined;
                selected?: boolean | undefined;
            } | undefined;
            VaStepper?: {
                vertical?: boolean | undefined;
                color?: string | undefined;
                modelValue?: number | undefined;
                stateful?: boolean | undefined;
                steps?: {
                    label: string;
                    icon?: string | undefined;
                    disabled?: boolean | undefined;
                }[] | undefined;
                nextDisabled?: boolean | undefined;
                finishButtonHidden?: boolean | undefined;
                navigationDisabled?: boolean | undefined;
                controlsHidden?: boolean | undefined;
            } | undefined;
            VaTimeInput?: {
                readonly?: boolean | undefined;
                label?: string | undefined;
                view?: "hours" | "minutes" | "seconds" | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                modelValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                icon?: string | undefined;
                disabled?: boolean | undefined;
                clearable?: boolean | undefined;
                stateful?: boolean | undefined;
                success?: boolean | undefined;
                error?: boolean | undefined;
                placement?: import("../../composables").PlacementWithAlias | undefined;
                offset?: import("../../components/va-dropdown/types").DropdownOffsetProp | undefined;
                keepAnchorWidth?: boolean | undefined;
                autoPlacement?: boolean | undefined;
                stickToEdges?: boolean | undefined;
                counterValue?: number | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
                errorMessages?: string | string[] | undefined;
                errorCount?: string | number | undefined;
                rules?: import("../../composables").ValidationRule<Date>[] | undefined;
                messages?: string | string[] | undefined;
                immediateValidation?: boolean | undefined;
                loading?: boolean | undefined;
                background?: string | undefined;
                outline?: boolean | undefined;
                bordered?: boolean | undefined;
                leftIcon?: boolean | undefined;
                anchorSelector?: string | undefined;
                innerAnchorSelector?: string | undefined;
                teleport?: import("../../composables").MaybeHTMLElementOrSelector;
                preventOverflow?: boolean | undefined;
                isContentHoverable?: boolean | undefined;
                closeOnContentClick?: boolean | undefined;
                closeOnClickOutside?: boolean | undefined;
                closeOnAnchorClick?: boolean | undefined;
                hoverOverTimeout?: number | undefined;
                hoverOutTimeout?: number | undefined;
                cursor?: boolean | undefined;
                trigger?: "click" | "hover" | "dblclick" | "none" | "right-click" | undefined;
                keyboardNavigation?: boolean | undefined;
                maxLength?: number | undefined;
                focused?: boolean | undefined;
                requiredMark?: boolean | undefined;
                clearableIcon?: string | undefined;
                clearValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                manualInput?: boolean | undefined;
                isOpen?: boolean | undefined;
                readonly format?: ((date?: Date | undefined) => string) | undefined;
                readonly parse?: ((input: string) => Date) | undefined;
                cellHeight?: number | undefined;
                ampm?: boolean | undefined;
                hidePeriodSwitch?: boolean | undefined;
                periodUpdatesModelValue?: boolean | undefined;
                hoursFilter?: ((h: number) => boolean) | undefined;
                minutesFilter?: ((h: number) => boolean) | undefined;
                secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: boolean | undefined;
                visibleCellsCount?: number | undefined;
            } | undefined;
            VaTimeline?: {} | undefined;
            VaTimelineItem?: {
                vertical?: boolean | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                active?: boolean | undefined;
                activePrevious?: boolean | undefined;
                activeNext?: boolean | undefined;
                isFirst?: boolean | undefined;
                isLast?: boolean | undefined;
                inverted?: boolean | undefined;
            } | undefined;
            VaTimePicker?: {
                readonly?: boolean | undefined;
                view?: "hours" | "minutes" | "seconds" | undefined;
                preset?: string | undefined;
                readonly modelValue?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | undefined;
                disabled?: boolean | undefined;
                stateful?: boolean | undefined;
                cellHeight?: number | undefined;
                ampm?: boolean | undefined;
                hidePeriodSwitch?: boolean | undefined;
                periodUpdatesModelValue?: boolean | undefined;
                readonly hoursFilter?: ((h: number) => boolean) | undefined;
                readonly minutesFilter?: ((h: number) => boolean) | undefined;
                readonly secondsFilter?: ((h: number) => boolean) | undefined;
                framed?: boolean | undefined;
                visibleCellsCount?: number | undefined;
            } | undefined;
            VaToast?: {
                readonly render?: Function | undefined;
                title?: string | undefined;
                color?: string | undefined;
                preset?: string | undefined;
                icon?: string | undefined;
                message?: string | Function | undefined;
                position?: import("../../components").ToastPosition | undefined;
                duration?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                closeable?: boolean | undefined;
                multiLine?: boolean | undefined;
                dangerouslyUseHtmlString?: boolean | undefined;
                customClass?: string | undefined;
            } | undefined;
            VaTreeView?: {
                filter?: string | undefined;
                color?: string | undefined;
                stateful?: boolean | undefined;
                textBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                valueBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                trackBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                disabledBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                expanded?: (string | number | {
                    [x: string]: any;
                    id: string | number;
                    level?: number | undefined;
                    checked?: boolean | null | undefined;
                    disabled?: boolean | undefined;
                    expanded?: boolean | undefined;
                    hasChildren?: boolean | undefined;
                    matchesFilter?: boolean | undefined;
                    indeterminate?: boolean | undefined;
                })[] | undefined;
                checked?: (string | number | {
                    [x: string]: any;
                    id: string | number;
                    level?: number | undefined;
                    checked?: boolean | null | undefined;
                    disabled?: boolean | undefined;
                    expanded?: boolean | undefined;
                    hasChildren?: boolean | undefined;
                    matchesFilter?: boolean | undefined;
                    indeterminate?: boolean | undefined;
                })[] | undefined;
                selectable?: boolean | undefined;
                filterMethod?: import("../../components/va-tree-view/types").TreeViewFilterMethod | undefined;
                iconBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                expandNodeBy?: "leaf" | "node" | undefined;
                nodes?: {
                    [x: string]: any;
                    id: string | number;
                    level?: number | undefined;
                    checked?: boolean | null | undefined;
                    disabled?: boolean | undefined;
                    expanded?: boolean | undefined;
                    hasChildren?: boolean | undefined;
                    matchesFilter?: boolean | undefined;
                    indeterminate?: boolean | undefined;
                }[] | undefined;
                selectionType?: string | undefined;
                expandedBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                checkedBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                childrenBy?: import("../../components/va-tree-view/types").TreeViewPropKey | undefined;
                expandAll?: boolean | undefined;
            } | undefined;
            VaScrollContainer?: {
                horizontal?: boolean | undefined;
                vertical?: boolean | undefined;
                color?: string | undefined;
                size?: "small" | "medium" | "large" | undefined;
                sizesConfig?: Record<string, any> | undefined;
                fontSizesConfig?: Record<string, any> | undefined;
                gradient?: boolean | undefined;
                rtl?: boolean | undefined;
            } | undefined;
            VaViewer?: {} | undefined;
            VaVirtualScroller?: {
                table?: boolean | undefined;
                horizontal?: boolean | undefined;
                disabled?: boolean | undefined;
                trackBy?: string | number | ((item: any[] | Record<string, any>) => string | number) | undefined;
                items?: unknown[] | undefined;
                bench?: number | undefined;
                itemSize?: string | number | undefined;
                wrapperSize?: string | number | undefined;
            } | undefined;
            all?: import("../component-config").Props | undefined;
            presets?: {
                VaAccordion?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaAffix?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaAlert?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaAppBar?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaAspectRatio?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaAvatar?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaAvatarGroup?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaBacktop?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaBadge?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaBreadcrumbs?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaBreadcrumbsItem?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaButton?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaButtonDropdown?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaButtonGroup?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaButtonToggle?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCard?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCardBlock?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCardActions?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCardContent?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCardTitle?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCarousel?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCheckbox?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaChip?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCollapse?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaColorIndicator?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaColorInput?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaColorPalette?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaConfig?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaContent?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaCounter?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaDataTable?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaDateInput?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaDatePicker?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaDivider?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaDropdown?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaDropdownContent?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaFallback?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaFileUpload?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaForm?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaHover?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaIcon?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaImage?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaInfiniteScroll?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaInnerLoading?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaInput?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaList?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaListItem?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaListItemLabel?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaListItemSection?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaListLabel?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaListSeparator?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaMessageList?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaModal?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaNavbar?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaNavbarItem?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaOptionList?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaPagination?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaParallax?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaPopover?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaProgressBar?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaProgressCircle?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaRadio?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaRating?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSelect?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSeparator?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSkeleton?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSkeletonGroup?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSidebar?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSidebarItem?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSidebarItemContent?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSidebarItemTitle?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSlider?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSpacer?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSplit?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaSwitch?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTabs?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTab?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaStepper?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTimeInput?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTimeline?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTimelineItem?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTimePicker?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaToast?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaTreeView?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaScrollContainer?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaViewer?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
                VaVirtualScroller?: {
                    [presetName: string]: import("../component-config").Props;
                } | undefined;
            } | undefined;
        };
        breakpoint: {
            enabled: boolean;
            bodyClass: boolean;
            thresholds: {
                xs: number;
                sm: number;
                md: number;
                lg: number;
                xl: number;
            };
        };
        i18n: {
            search: string;
            noOptions: string;
            ok: string;
            cancel: string;
            uploadFile: string;
            undo: string;
            dropzone: string;
            fileDeleted: string;
            closeAlert: string;
            backToTop: string;
            toggleDropdown: string;
            carousel: string;
            goPreviousSlide: string;
            goNextSlide: string;
            goSlide: string;
            slideOf: string;
            close: string;
            openColorPicker: string;
            colorSelection: string;
            colorName: string;
            decreaseCounter: string;
            increaseCounter: string;
            selectAllRows: string;
            sortColumnBy: string;
            selectRowByIndex: string;
            resetDate: string;
            nextPeriod: string;
            switchView: string;
            previousPeriod: string;
            removeFile: string;
            reset: string;
            pagination: string;
            goToTheFirstPage: string;
            goToPreviousPage: string;
            goToSpecificPage: string;
            goToSpecificPageInput: string;
            goNextPage: string;
            goLastPage: string;
            currentRating: string;
            voteRating: string;
            optionsFilter: string;
            splitPanels: string;
            movePaginationLeft: string;
            movePaginationRight: string;
            resetTime: string;
            closeToast: string;
            selectedOption: string;
            noSelectedOption: string;
            breadcrumbs: string;
            counterValue: string;
            selectedDate: string;
            selectedTime: string;
            progressState: string;
            color: string;
            next: string;
            back: string;
            finish: string;
            step: string;
            progress: string;
        };
        colorsClasses: {
            prefix?: string | undefined;
            postfix?: string | undefined;
            property?: string | string[] | undefined;
            value?: string | undefined;
        }[];
        routerComponent: {
            new (...args: any[]): any;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } | import("vue").FunctionalComponent<any, any> | {
            [x: string]: any;
            setup?: ((this: void, props: Readonly<import("@vue/shared").LooseRequired<any>>, ctx: import("vue").SetupContext<any>) => any) | undefined;
            name?: string | undefined;
            template?: string | object | undefined;
            render?: Function | undefined;
            components?: Record<string, import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>> | undefined;
            directives?: Record<string, import("vue").Directive<any, any>> | undefined;
            inheritAttrs?: boolean | undefined;
            emits?: any;
            expose?: string[] | undefined;
            serverPrefetch?: (() => Promise<any>) | undefined;
            compilerOptions?: {
                isCustomElement?: ((tag: string) => boolean) | undefined;
                whitespace?: "preserve" | "condense" | undefined;
                comments?: boolean | undefined;
                delimiters?: [string, string] | undefined;
            } | undefined;
            call?: ((this: unknown, ...args: unknown[]) => never) | undefined;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
            __defaults?: {} | undefined;
            compatConfig?: {
                GLOBAL_MOUNT?: boolean | "suppress-warning" | undefined;
                GLOBAL_MOUNT_CONTAINER?: boolean | "suppress-warning" | undefined;
                GLOBAL_EXTEND?: boolean | "suppress-warning" | undefined;
                GLOBAL_PROTOTYPE?: boolean | "suppress-warning" | undefined;
                GLOBAL_SET?: boolean | "suppress-warning" | undefined;
                GLOBAL_DELETE?: boolean | "suppress-warning" | undefined;
                GLOBAL_OBSERVABLE?: boolean | "suppress-warning" | undefined;
                GLOBAL_PRIVATE_UTIL?: boolean | "suppress-warning" | undefined;
                CONFIG_SILENT?: boolean | "suppress-warning" | undefined;
                CONFIG_DEVTOOLS?: boolean | "suppress-warning" | undefined;
                CONFIG_KEY_CODES?: boolean | "suppress-warning" | undefined;
                CONFIG_PRODUCTION_TIP?: boolean | "suppress-warning" | undefined;
                CONFIG_IGNORED_ELEMENTS?: boolean | "suppress-warning" | undefined;
                CONFIG_WHITESPACE?: boolean | "suppress-warning" | undefined;
                CONFIG_OPTION_MERGE_STRATS?: boolean | "suppress-warning" | undefined;
                INSTANCE_SET?: boolean | "suppress-warning" | undefined;
                INSTANCE_DELETE?: boolean | "suppress-warning" | undefined;
                INSTANCE_DESTROY?: boolean | "suppress-warning" | undefined;
                INSTANCE_EVENT_EMITTER?: boolean | "suppress-warning" | undefined;
                INSTANCE_EVENT_HOOKS?: boolean | "suppress-warning" | undefined;
                INSTANCE_CHILDREN?: boolean | "suppress-warning" | undefined;
                INSTANCE_LISTENERS?: boolean | "suppress-warning" | undefined;
                INSTANCE_SCOPED_SLOTS?: boolean | "suppress-warning" | undefined;
                INSTANCE_ATTRS_CLASS_STYLE?: boolean | "suppress-warning" | undefined;
                OPTIONS_DATA_FN?: boolean | "suppress-warning" | undefined;
                OPTIONS_DATA_MERGE?: boolean | "suppress-warning" | undefined;
                OPTIONS_BEFORE_DESTROY?: boolean | "suppress-warning" | undefined;
                OPTIONS_DESTROYED?: boolean | "suppress-warning" | undefined;
                WATCH_ARRAY?: boolean | "suppress-warning" | undefined;
                PROPS_DEFAULT_THIS?: boolean | "suppress-warning" | undefined;
                V_ON_KEYCODE_MODIFIER?: boolean | "suppress-warning" | undefined;
                CUSTOM_DIR?: boolean | "suppress-warning" | undefined;
                ATTR_FALSE_VALUE?: boolean | "suppress-warning" | undefined;
                ATTR_ENUMERATED_COERCION?: boolean | "suppress-warning" | undefined;
                TRANSITION_CLASSES?: boolean | "suppress-warning" | undefined;
                TRANSITION_GROUP_ROOT?: boolean | "suppress-warning" | undefined;
                COMPONENT_ASYNC?: boolean | "suppress-warning" | undefined;
                COMPONENT_FUNCTIONAL?: boolean | "suppress-warning" | undefined;
                COMPONENT_V_MODEL?: boolean | "suppress-warning" | undefined;
                RENDER_FUNCTION?: boolean | "suppress-warning" | undefined;
                FILTERS?: boolean | "suppress-warning" | undefined;
                PRIVATE_APIS?: boolean | "suppress-warning" | undefined;
                MODE?: 3 | 2 | ((comp: import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | null) => 3 | 2) | undefined;
            } | undefined;
            data?: ((this: any, vm: any) => any) | undefined;
            computed?: import("vue").ComputedOptions | undefined;
            methods?: import("vue").MethodOptions | undefined;
            watch?: {
                [x: string]: (string | import("vue").WatchCallback<any, any> | ({
                    handler: string | import("vue").WatchCallback<any, any>;
                } & import("vue").WatchOptions<boolean>)) | (string | import("vue").WatchCallback<any, any> | ({
                    handler: string | import("vue").WatchCallback<any, any>;
                } & import("vue").WatchOptions<boolean>))[];
            } | undefined;
            provide?: import("vue").ComponentProvideOptions | undefined;
            inject?: (string[] | {
                [x: string]: string | symbol | {
                    from?: string | symbol | undefined;
                    default?: unknown;
                };
                [x: symbol]: string | symbol | {
                    from?: string | symbol | undefined;
                    default?: unknown;
                };
            }) | undefined;
            filters?: Record<string, Function> | undefined;
            mixins?: any[] | undefined;
            extends?: any;
            beforeCreate?: (() => void) | undefined;
            created?: (() => void) | undefined;
            beforeMount?: (() => void) | undefined;
            mounted?: (() => void) | undefined;
            beforeUpdate?: (() => void) | undefined;
            updated?: (() => void) | undefined;
            activated?: (() => void) | undefined;
            deactivated?: (() => void) | undefined;
            beforeDestroy?: (() => void) | undefined;
            beforeUnmount?: (() => void) | undefined;
            destroyed?: (() => void) | undefined;
            unmounted?: (() => void) | undefined;
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | undefined;
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | undefined;
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | undefined;
            delimiters?: [string, string] | undefined;
            __differentiator?: string | number | symbol | undefined;
            __isBuiltIn?: boolean | undefined;
            __file?: string | undefined;
            __name?: string | undefined;
            beforeRouteEnter?: import("vue-router").NavigationGuardWithThis<undefined> | undefined;
            beforeRouteUpdate?: import("vue-router").NavigationGuard | undefined;
            beforeRouteLeave?: import("vue-router").NavigationGuard | undefined;
        } | undefined;
    }>;
};
/** Use this function if you don't want to throw error if hook used outside setup function by useGlobalConfig */
export declare function useGlobalConfig(): ProvidedGlobalConfig;
export * from './types';

export declare const VaChip: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    valueComputed: import("vue").WritableComputedRef<any>;
    hrefComputed: import("vue").ComputedRef<any>;
    tagComputed: import("vue").ComputedRef<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | undefined>;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    isHovered: import("vue").Ref<boolean>;
    close: () => void;
    iconSize: import("vue").ComputedRef<string>;
    tabIndexComputed: import("vue").ComputedRef<0 | -1>;
    computedClass: {
        [x: `va-chip--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-chip--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-chip--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    computedStyle: import("vue").ComputedRef<{
        color: string;
        borderColor: string;
        background: string;
        boxShadow: string | undefined;
    }>;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    readonly: boolean;
    replace: boolean;
    flat: boolean;
    tag: string;
    color: string;
    preset: string;
    size: "small" | "medium" | "large";
    modelValue: boolean;
    icon: string;
    disabled: boolean;
    stateful: boolean;
    shadow: boolean;
    href: string;
    append: boolean;
    to: string | Record<string, any>;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    target: string;
    closeable: boolean;
    outline: boolean;
    square: boolean;
}>;

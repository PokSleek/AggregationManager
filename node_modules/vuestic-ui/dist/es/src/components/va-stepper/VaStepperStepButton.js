import { defineComponent, shallowRef, watch, nextTick, computed, resolveComponent, openBlock, createElementBlock, mergeProps, withKeys, createElementVNode, createBlock, Fragment, createTextVNode, toDisplayString } from "vue";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaStepperStepButton_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaStepperStepButton",
  components: { VaIcon },
  props: {
    modelValue: { type: Number, required: true },
    step: {
      type: Object,
      required: true
    },
    color: { type: String, required: true },
    stepIndex: { type: Number, required: true },
    navigationDisabled: { type: Boolean, required: true },
    nextDisabled: { type: Boolean, required: true },
    focus: { type: Object, required: true },
    stepControls: { type: Object, required: true }
  },
  emits: ["update:modelValue"],
  setup(props) {
    const stepElement = shallowRef();
    const { getColor } = useColors();
    const stepperColor = getColor(props.color);
    const isNextStepDisabled = (index) => props.nextDisabled && index > props.modelValue;
    const { t } = useTranslation();
    const computedClass = useBem("va-stepper__step-button", () => ({
      active: props.modelValue >= props.stepIndex,
      disabled: props.step.disabled || isNextStepDisabled(props.stepIndex),
      "navigation-disabled": props.navigationDisabled
    }));
    watch(() => props.focus, () => {
      if (props.focus.trigger) {
        nextTick(() => {
          var _a;
          return (_a = stepElement.value) == null ? void 0 : _a.focus();
        });
      }
    }, { deep: true });
    return {
      stepElement,
      isNextStepDisabled,
      stepperColor,
      getColor,
      computedClass,
      ariaAttributesComputed: computed(() => ({
        tabindex: props.focus.stepIndex === props.stepIndex && !props.navigationDisabled ? 0 : void 0,
        "aria-disabled": props.step.disabled || isNextStepDisabled(props.stepIndex) ? true : void 0,
        "aria-current": props.modelValue === props.stepIndex ? t("step") : void 0
      }))
    };
  }
});
const _hoisted_1 = { class: "va-stepper__step-button__icon" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("li", mergeProps({
    ref: "stepElement",
    class: ["va-stepper__step-button", _ctx.computedClass],
    onClick: _cache[0] || (_cache[0] = ($event) => !_ctx.$props.navigationDisabled && _ctx.$props.stepControls.setStep(_ctx.$props.stepIndex)),
    onKeyup: [
      _cache[1] || (_cache[1] = withKeys(($event) => !_ctx.$props.navigationDisabled && _ctx.$props.stepControls.setStep(_ctx.$props.stepIndex), ["enter"])),
      _cache[2] || (_cache[2] = withKeys(($event) => !_ctx.$props.navigationDisabled && _ctx.$props.stepControls.setStep(_ctx.$props.stepIndex), ["space"]))
    ]
  }, _ctx.ariaAttributesComputed, {
    style: `--va-0-stepper-color: ${String(_ctx.stepperColor)}`
  }), [
    createElementVNode("div", _hoisted_1, [
      _ctx.step.icon ? (openBlock(), createBlock(_component_va_icon, {
        key: 0,
        name: _ctx.step.icon,
        size: "1.3rem"
      }, null, 8, ["name"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        createTextVNode(toDisplayString(_ctx.$props.stepIndex + 1), 1)
      ], 64))
    ]),
    createTextVNode(" " + toDisplayString(_ctx.step.label), 1)
  ], 16);
}
var VaStepperStepButton = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { VaStepperStepButton as V };

import './VaStepperStepButton.css';
//# sourceMappingURL=VaStepperStepButton.js.map
